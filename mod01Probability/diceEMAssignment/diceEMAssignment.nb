(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     17074,        434]
NotebookOptionsPosition[     15392,        372]
NotebookOutlinePosition[     15749,        388]
CellTagsIndexPosition[     15706,        385]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Dice EM assignment", "Title",
 CellChangeTimes->{{3.5855109621349773`*^9, 3.5855109786207867`*^9}}],

Cell["\<\
This assignment involves writing some code for an EM algorithm and then \
testing it, doing some experiments, and answering some questions. Please \
write your answers below the questions and turn this notebook in with your \
code.\
\>", "Text",
 CellChangeTimes->{{3.585512475580336*^9, 3.5855125543489027`*^9}}],

Cell[CellGroupData[{

Cell["Coding", "Section",
 CellChangeTimes->{{3.5855110461522093`*^9, 3.58551104688463*^9}}],

Cell[TextData[{
 StyleBox["This is a continuation of the ",
  FontColor->Automatic],
 StyleBox["diceSample",
  FontWeight->"Bold",
  FontColor->Automatic],
 StyleBox[" and ",
  FontColor->Automatic],
 StyleBox["dicePosterior",
  FontWeight->"Bold",
  FontColor->Automatic],
 StyleBox[" assignments.  In these assignments, we have a bag containing two \
types of dice with different probabilities of rolling each number.  Someone \
selects a die from the bag at random, rolls it a fixed number of times, \
reports the outcomes, returns it to the bag, and repeats the process.  Here, \
you will write code to run the EM (Expectation Maximization) algorithm to \
estimate the parameters of the system -- the probability of drawing each die \
type and the conditional probability of each face given the die type.\n\n\
Write a function called ",
  FontColor->Automatic],
 StyleBox["diceEM",
  FontFamily->"Courier New",
  FontColor->Automatic],
 StyleBox[" that takes a sample of die draws and rolls, runs the EM \
algorithm, and outputs the estimated parameters.",
  FontColor->Automatic]
}], "Text",
 CellChangeTimes->{{3.585511054430279*^9, 3.585511089917618*^9}, {
  3.585511121620488*^9, 3.585511188876453*^9}, {3.585511236981254*^9, 
  3.585511531292819*^9}, {3.585589550249552*^9, 3.5855895528959713`*^9}, {
  3.585589618879745*^9, 3.585589736988511*^9}, {3.58558982569786*^9, 
  3.585589837879303*^9}, {3.5855898971032*^9, 3.585589953134733*^9}, {
  3.5855899947739897`*^9, 3.5855899989980288`*^9}, {3.585590530378899*^9, 
  3.585590619913625*^9}, {3.585678954137244*^9, 3.585678994249689*^9}, {
  3.585915486586301*^9, 3.5859154875789137`*^9}, {3.585915517778281*^9, 
  3.5859155219063597`*^9}, {3.5860220289383497`*^9, 3.586022029501439*^9}},
 FontColor->RGBColor[0.5, 0, 0.5]],

Cell[CellGroupData[{

Cell["Input and output", "Subsection",
 CellChangeTimes->{{3.58558939219401*^9, 3.5855893941449203`*^9}},
 FontColor->Automatic],

Cell["The first line of your function should be:", "Text",
 CellChangeTimes->{3.585589466096129*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"diceEM", "[", 
   RowBox[{"sample_", ",", "maxIterations_", ",", "accuracy_"}], "]"}], 
  ":="}]], "Input",
 CellChangeTimes->{{3.5855894336454363`*^9, 3.585589433646515*^9}}],

Cell[TextData[{
 "where,\n\n",
 StyleBox["sample",
  FontFamily->"Courier New"],
 " is a matrix (i.e. list of lists) in which each row (each sublist) is a set \
of rolls from one draw.  This matrix is the same as the output produced by \
your ",
 StyleBox["diceSample",
  FontFamily->"Courier New"],
 " function.\n\n",
 StyleBox["maxIterations",
  FontFamily->"Courier New"],
 " is the maximum number of EM iterations the function should run before \
terminating.\n\n",
 StyleBox["accuracy",
  FontFamily->"Courier New"],
 " is the value at which to terminate the EM iterations when the total change \
in all parameters from one iteration to the next is less than this value.  \
The iteration should stop when either termination condition is met. \n\nThe \
number of faces, trials per draw, etc., can all be inferred from the input \
sample so they will not be provided as arguments. \n\nYou code will call your \
",
 StyleBox["dicePosteriors",
  FontFamily->"Courier New"],
 " function and the unit tests will call your ",
 StyleBox["diceSample",
  FontFamily->"Courier New"],
 " function, so please be sure that they work. If not, they can be provided \
on request.\n\nThe return value is a list of the estimated parameters."
}], "Text",
 CellChangeTimes->{{3.585589476497059*^9, 3.585589493266638*^9}, {
  3.585589533952774*^9, 3.585589534857189*^9}, {3.585589857639256*^9, 
  3.585589873358777*^9}, {3.585590015206093*^9, 3.585590129837669*^9}, {
  3.585590161068686*^9, 3.585590286458582*^9}, {3.58559034184394*^9, 
  3.585590378706388*^9}, {3.58559048017951*^9, 3.585590555730523*^9}, {
  3.585590716440814*^9, 3.585590722281188*^9}, {3.5855908759048977`*^9, 
  3.585590897886427*^9}, {3.585679048784273*^9, 3.5856790558956947`*^9}, {
  3.5856790998241453`*^9, 3.585679118095757*^9}, {3.5859154947384567`*^9, 
  3.585915613786189*^9}, {3.585915762617684*^9, 3.5859157819038*^9}, {
  3.585915984151194*^9, 3.585916018910907*^9}, {3.585916058830315*^9, 
  3.585916091078376*^9}}],

Cell[TextData[{
 "Outlines of the code are provided in the file diceEM.m. Read the comments, \
too. You only have to fill in the key parts of the algorithm and paste in \
your ",
 StyleBox["diceSample",
  FontFamily->"Courier New"],
 " and ",
 StyleBox["dicePosteriors",
  FontFamily->"Courier New"],
 " code."
}], "Text",
 CellChangeTimes->{3.58558953196763*^9, 3.585590629538105*^9, 
  3.585590679144126*^9, 3.5859161031424093`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["EM initialization", "Subsection",
 CellChangeTimes->{{3.585678662002997*^9, 3.5856786658813334`*^9}}],

Cell["\<\
In the EM loop you will be iteratively updating your estimates for the values \
of the parameters. To initialize these estimates, do not make all the \
possibilities equally likely. If you do, the algorithm may get stuck and take \
longer to converge or not converge on the right answer at all. However, do \
not make them too far from equally likely, either. Since there are only two \
die types, I suggest initializing their probabilities to 0.45 and 0.55. For \
the probabilities of the n faces of each die, I took a random real between \
1/n and 2/n. Then I normalized them so they would all add up to one using the \
call\
\>", "Text",
 CellChangeTimes->{{3.585511769313303*^9, 3.585512058668063*^9}, {
  3.5860222115335293`*^9, 3.586022230581175*^9}}],

Cell[BoxData[
 RowBox[{"Normalize", "[", 
  RowBox[{"listOfNumbers", ",", " ", "Total"}], "]"}]], "Input",
 CellChangeTimes->{{3.5855120634999533`*^9, 3.585512083262108*^9}}],

Cell["\<\
which divides a list by its total. Or if you\[CloseCurlyQuote]re in a \
do-it-yourself mood,\
\>", "Text",
 CellChangeTimes->{{3.585512087140627*^9, 3.585512110036173*^9}, {
  3.5855121462205763`*^9, 3.585512151564994*^9}, {3.5860222484313393`*^9, 
  3.586022249171916*^9}}],

Cell[BoxData[
 RowBox[{"listOfNumbers", " ", "/", " ", 
  RowBox[{"Total", "[", "listOfNumbers", "]"}]}]], "Input",
 CellChangeTimes->{{3.5855121258641243`*^9, 3.5855121361508503`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Testing", "Section",
 CellChangeTimes->{{3.585512173665118*^9, 3.585512174397122*^9}}],

Cell[TextData[{
 "A test file has been provided including all the tests for ",
 StyleBox["diceSample",
  FontFamily->"Courier New"],
 " and ",
 StyleBox["dicePosteriors",
  FontFamily->"Courier New"],
 ", so those must be present and available to call. The first two tests are \
deterministic and the last few rely on ",
 StyleBox["diceSample",
  FontFamily->"Courier New"],
 " to create large random samples according to certain distributions. The \
sample sizes and number of EM iterations are large enough that they should \
almost always produce the right number. If you\[CloseCurlyQuote]re pretty \
sure your code is right and a test fails, run the tests again. If it fails \
repeatedly, your code is wrong."
}], "Text",
 CellChangeTimes->{{3.585512177132576*^9, 3.58551224205259*^9}, {
   3.585512305828191*^9, 3.585512446845121*^9}, {3.58559091043968*^9, 
   3.5855909144794207`*^9}, 3.58559094837527*^9, 3.585916140247183*^9, {
   3.5859161880218983`*^9, 3.585916189733902*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Experiments and questions", "Section",
 CellChangeTimes->{{3.5855125680373287`*^9, 3.5855125711403923`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Number of iterations needed for convergence\
\>", "Subsection",
 CellChangeTimes->{{3.585514019327592*^9, 3.585514037668663*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Generate a sample with ",
 StyleBox["diceSample[0.4, 0.6, {0.3, 0.3, 0.2, 0.2}, {0.1, 0.2, 0.2, 0.5}, \
4000, 100]",
  FontFamily->"Courier",
  FontSize->14],
 ". Run ",
 StyleBox["diceEM",
  FontFamily->"Courier",
  FontSize->14],
 " using 500 iterations and accuracry 10^-5 and round the results to the \
nearest 0.01 (using ",
 StyleBox["Round",
  FontFamily->"Courier"],
 ", which can be applied to lists and will round numbers at any level). \
First, verify that your algorithm produces exactly the input distribution, \
when rounded this way, at least 9 of 10 times. (The samples will be different \
each time you call diceSample.)"
}], "ItemNumbered",
 CellChangeTimes->{{3.5855127044312973`*^9, 3.58551273417302*^9}, {
  3.58551295062579*^9, 3.585513020764667*^9}, {3.585513134869034*^9, 
  3.58551319216504*^9}, {3.585513451959071*^9, 3.585513452132319*^9}, {
  3.585513710184174*^9, 3.585513711052243*^9}, {3.58551379727724*^9, 
  3.5855138245643673`*^9}, {3.585513892557687*^9, 3.5855139684926777`*^9}, {
  3.585514048596245*^9, 3.585514048605052*^9}, {3.585514121053053*^9, 
  3.585514145228565*^9}}],

Cell[TextData[{
 "Now let\[CloseCurlyQuote]s make it easier by rounding to the nearest 0.1. \
Reduce the maximum number of iterations until you reach the point where your \
answer is not exactly right when rounded this way about half the time. How \
many iterations were required to get the right answer half the time? What is \
the smallest ",
 StyleBox["maxIterations",
  FontFamily->"Courier",
  FontSize->14],
 " that gives you the right answer on 10 out of 10 samples? Show enough of \
your experiments to convince the reader of your answer -- but not every \
single thing you tried."
}], "ItemNumbered",
 CellChangeTimes->{{3.5855127044312973`*^9, 3.58551273417302*^9}, {
  3.58551295062579*^9, 3.585513020764667*^9}, {3.585513134869034*^9, 
  3.58551319216504*^9}, {3.585513451959071*^9, 3.585513452132319*^9}, {
  3.585513710184174*^9, 3.585513711052243*^9}, {3.58551379727724*^9, 
  3.5855138245643673`*^9}, {3.585513892557687*^9, 3.5855139684926777`*^9}, {
  3.585514048596245*^9, 3.585514114077118*^9}, {3.585514154061596*^9, 
  3.585514259726389*^9}, {3.585514982224204*^9, 3.585515065450198*^9}, {
  3.586022455961109*^9, 3.586022457663808*^9}, {3.5860224880717278`*^9, 
  3.58602248917522*^9}}],

Cell[TextData[{
 "Now try with a more extreme distribution on dice selection: ",
 StyleBox["diceSample[0.1, 0.9, {0.3, 0.3, 0.2, 0.2}, {0.1, 0.2, 0.2, 0.5}, \
4000, 100]",
  FontFamily->"Courier",
  FontSize->14],
 ". How much difference does this make in the number of iterations needed to \
get the right answer?\[LineSeparator]"
}], "ItemNumbered",
 CellChangeTimes->{{3.5855127044312973`*^9, 3.58551273417302*^9}, {
  3.58551295062579*^9, 3.585513020764667*^9}, {3.585513134869034*^9, 
  3.58551319216504*^9}, {3.585513451959071*^9, 3.585513452132319*^9}, {
  3.585513710184174*^9, 3.585513711052243*^9}, {3.58551379727724*^9, 
  3.5855138245643673`*^9}, {3.585513892557687*^9, 3.5855139684926777`*^9}, {
  3.585514048596245*^9, 3.585514114077118*^9}, {3.585514154061596*^9, 
  3.585514259726389*^9}, {3.585514982224204*^9, 3.585515123220995*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sample size", "Subsection",
 CellChangeTimes->{{3.585515169813821*^9, 3.585515171525044*^9}}],

Cell["\<\
For this question, use enough iterations that EM convergence should not be a \
problem -- at least twice the smallest number that gave you 10 out 10 right. \
Round your estimates to the nearest 0.1.\
\>", "Text",
 CellChangeTimes->{{3.585515218967927*^9, 3.585515298676363*^9}}],

Cell[CellGroupData[{

Cell["\<\
diceSample[0.4, 0.6, {0.3, 0.3, 0.2, 0.2}, {0.1, 0.2, 0.2, 0.5}, 4000, 100] \
produces a total 400,000 rolls. That\[CloseCurlyQuote]s a lot of data! Try \
reducing the number of draws while keeping the number of rolls constant. Try \
to estimate how many draws you need with 100 rolls each to get the right \
answer consistently -- say at least 90% of the samples.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.585515201208303*^9, 3.585515208932482*^9}, {
  3.5855152682445917`*^9, 3.5855152889652777`*^9}, {3.5855155648870287`*^9, 
  3.5855156335836363`*^9}}],

Cell["\<\
Go back to 4,000 draws and start reducing the number of rolls per draw until \
you no longer get the right answer consistently. Was the total number of \
rolls approximately the same as you got by reducing the draws? If not, \
speculate on why not.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.585515201208303*^9, 3.585515208932482*^9}, {
  3.5855152682445917`*^9, 3.5855152889652777`*^9}, {3.5855155648870287`*^9, 
  3.585515717852112*^9}, {3.585516029317258*^9, 3.585516047180389*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Instructions and grading", "Section",
 CellChangeTimes->{{3.585589085899582*^9, 3.585589086700222*^9}, {
  3.586022771579047*^9, 3.586022775165971*^9}}],

Cell[TextData[{
 "Please turn in your .m file containing the code and sufficient \
documentation to read and understand it.\n\nThe rubric for this is:\n\nA. 1 \
point for turning in code that takes input of the right form and produces \
output of the right form. You must turn in your assignment on time to get \
this point.\n\nB. 3 points for turning in code containing a correct \
implementation of updateProbs, which carries out one round of EM by calling \
",
 StyleBox["dicePosteriors",
  FontFamily->"Courier New"],
 "\nand using the results to estimate new probabilities for all the \
parameters.\n\nC. 4 points for turning in code that passes all the tests \
distributed and is  fully correct. Just because your code passes all the \
provided unit tests does not guarantee that it is correct -- you need to \
think about what\[CloseCurlyQuote]s right.\n\nD.  2 points for style (things \
such as capitalization and full, descriptive names) and legibility, including \
indentation, line breaks, and comments. You must satisfy A-C to get these \
points."
}], "Text",
 CellChangeTimes->{{3.58499210831761*^9, 3.584992269479895*^9}, {
  3.584992305927824*^9, 3.584992605885792*^9}, {3.5849926396934137`*^9, 
  3.584992779654065*^9}, {3.585059307737156*^9, 3.585059353317692*^9}, {
  3.585059567260913*^9, 3.585059759166882*^9}, {3.5850598028309526`*^9, 
  3.585059837293536*^9}, {3.585069359494947*^9, 3.58506940083663*^9}, {
  3.585771078973572*^9, 3.5857710867632713`*^9}, {3.586022994463966*^9, 
  3.5860230450382843`*^9}, {3.586023120653462*^9, 3.586023232692699*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{772, 1148},
WindowMargins->{{91, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (November 20, \
2012)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 105, 1, 114, "Title"],
Cell[687, 25, 323, 6, 85, "Text"],
Cell[CellGroupData[{
Cell[1035, 35, 92, 1, 100, "Section"],
Cell[1130, 38, 1782, 36, 277, "Text"],
Cell[CellGroupData[{
Cell[2937, 78, 128, 2, 54, "Subsection"],
Cell[3068, 82, 100, 1, 37, "Text"],
Cell[3171, 85, 210, 5, 36, "Input"],
Cell[3384, 92, 1983, 40, 524, "Text"],
Cell[5370, 134, 434, 12, 87, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5841, 151, 107, 1, 54, "Subsection"],
Cell[5951, 154, 767, 12, 204, "Text"],
Cell[6721, 168, 174, 3, 35, "Input"],
Cell[6898, 173, 284, 6, 37, "Text"],
Cell[7185, 181, 185, 3, 35, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[7419, 190, 92, 1, 100, "Section"],
Cell[7514, 193, 986, 20, 186, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8537, 218, 114, 1, 100, "Section"],
Cell[CellGroupData[{
Cell[8676, 223, 139, 3, 54, "Subsection"],
Cell[CellGroupData[{
Cell[8840, 230, 1130, 25, 173, "ItemNumbered"],
Cell[9973, 257, 1208, 21, 171, "ItemNumbered"],
Cell[11184, 280, 851, 15, 124, "ItemNumbered"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[12084, 301, 99, 1, 54, "Subsection"],
Cell[12186, 304, 288, 5, 85, "Text"],
Cell[CellGroupData[{
Cell[12499, 313, 568, 9, 125, "ItemNumbered"],
Cell[13070, 324, 496, 8, 103, "ItemNumbered"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13627, 339, 158, 2, 100, "Section"],
Cell[13788, 343, 1576, 25, 467, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
