(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     10856,        291]
NotebookOptionsPosition[      9902,        253]
NotebookOutlinePosition[     10244,        268]
CellTagsIndexPosition[     10201,        265]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Programming exercise", "Section",
 CellChangeTimes->{{3.584990522242609*^9, 3.584990533174054*^9}}],

Cell[TextData[{
 "Suppose there is a bag containing two types of dice, which are visually \
identical but have different probabilities of rolling each number. Someone \
selects a die from the bag at random, rolls it a fixed number of times, \
reports the outcomes, returns it to the bag, and repeats the process. \
Eventually, you will write code that can figure out, from the results of such \
an experiment, the probability of each die type rolling each number as well \
as the probability of selecting a die of each type from the bag. An example \
solution for two four-sided dice might be something like:\n\n{0.4, 0.6, \
{0.25, 0.25, 0.25, 0.25}, {0.1, 0.1, 0.1, 0.7}}\n\n",
 StyleBox["indicating that the two dice were four-sided and the first type, \
which is drawn with probability 0.4, is fair, while the second type, drawn \
with probability 0.6, rolls a 4 70% of the time and each of the other numbers \
10% of the time. But you\[CloseCurlyQuote]re not going to attack that yet. \
For now, you\[CloseCurlyQuote]re simply going to simulate the process of \
drawing and rolling, that is, producing a \[OpenCurlyDoubleQuote]sample\
\[CloseCurlyDoubleQuote]. For this exercise, write a function called ",
  FontColor->GrayLevel[0]],
 StyleBox["diceSample",
  FontFamily->"Courier",
  FontColor->GrayLevel[0]],
 StyleBox[" that takes 6 arguments:\n\n",
  FontColor->GrayLevel[0]],
 "numType1",
 StyleBox[" = the number of type 1 dice in the bag\n",
  FontColor->GrayLevel[0]],
 "numType2",
 StyleBox[" = the number of type 2 dice in the bag\n",
  FontColor->GrayLevel[0]],
 "type1",
 StyleBox[" = a list of the probabilities of rolling each face with the first \
die\n",
  FontColor->GrayLevel[0]],
 "type2 ",
 StyleBox["= a list of the probabilities of rolling each face with the second \
die\n",
  FontColor->GrayLevel[0]],
 "draws",
 StyleBox[" = the number of times a die is drawn from the bag\n",
  FontColor->GrayLevel[0]],
 "rollsPerDraw",
 StyleBox[" = the number of times each die is rolled between being drawn and \
being returned\n\nThe output is a list of lists, with each sublist \
representing the faces rolled in one draw.\n\nHere\[CloseCurlyQuote]s an \
example of how ",
  FontColor->GrayLevel[0]],
 StyleBox["diceSample",
  FontFamily->"Courier",
  FontColor->GrayLevel[0]],
 StyleBox[" should behave.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.584990554288546*^9, 3.584990675668972*^9}, {
   3.584990706613673*^9, 3.584990827957404*^9}, {3.584990928240103*^9, 
   3.5849912338312187`*^9}, {3.58499135379578*^9, 3.5849914177019157`*^9}, 
   3.585776177111597*^9, {3.588454133120453*^9, 3.5884542233530765`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"diceSample", "[", 
  RowBox[{"1", ",", "0", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "/", "2"}], ",", 
     RowBox[{"1", "/", "4"}], ",", 
     RowBox[{"1", "/", "4"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"1", "/", "5"}], ",", 
     RowBox[{"4", "/", "5"}]}], "}"}], ",", "3", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.584990395362302*^9, 3.5849904237385397`*^9}, {
  3.58577573271355*^9, 3.585775739045986*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "2", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "1", ",", "3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "2", ",", "3", ",", "1"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.584990390347258*^9, 3.5849904283006763`*^9}]
}, Open  ]],

Cell[TextData[{
 StyleBox["Since we specified that each die should be rolled 5 times before \
being returned to the bag, each sublist consists of 5 integers representing \
the outcomes of individual rolls. Since we specified 3 draws, there are 3 \
such lists. You can also think of such a list of lists as a matrix and you \
can ask for it to be displayed as a matrix with ",
  FontColor->GrayLevel[0]],
 StyleBox["MatrixForm",
  FontFamily->"Courier New",
  FontColor->GrayLevel[0]],
 StyleBox[".",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.584991522376049*^9, 3.584991564485929*^9}, {
  3.584991629334051*^9, 3.5849918074615993`*^9}, {3.585776286671941*^9, 
  3.585776296365739*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.584990436846367*^9, 3.5849904422891893`*^9}, {
  3.584991820735358*^9, 3.584991826575282*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"3", "2", "2", "2", "2"},
     {"3", "1", "1", "3", "3"},
     {"3", "2", "2", "3", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.584990443101727*^9}]
}, Open  ]],

Cell["\<\
This works because % always refers to the last output from the kernal \
(regardless of where that output appears in a notebook). \
\>", "Text",
 CellChangeTimes->{{3.58499183065379*^9, 3.584991857997466*^9}}],

Cell[CellGroupData[{

Cell["Provided files", "Subsection",
 CellChangeTimes->{{3.585775816707532*^9, 3.585775820937223*^9}}],

Cell[TextData[{
 "We have provided a template for ",
 StyleBox["diceSample",
  FontFamily->"Courier"],
 " in the file diceSample.m and a basic test suite in the file \
diceSampleTest.mt. To run the tests, put them in the same directory as the .m \
file with the solution. From Workbench, right click on the .mt test file and \
and select Run As -> ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " test.\n\nTo get full credit, your answer should be fully correct and \
should pass all the tests. "
}], "Text",
 CellChangeTimes->{{3.5849918841896963`*^9, 3.584992069398471*^9}, {
   3.585775833209194*^9, 3.58577589504904*^9}, 3.585776459998699*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["A possible approach", "Subsection",
 CellChangeTimes->{{3.58577633519808*^9, 3.5857763383007107`*^9}}],

Cell[TextData[{
 "The way I approached this problem was to use the input probability \
parameters to create ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " probability distributions using the built in functions ",
 StyleBox["EmpiricalDistribution",
  FontFamily->"Courier"],
 " for the face probabilities of each die and ",
 StyleBox["BernoulliDistribution",
  FontFamily->"Courier"],
 " for the die selection (you could also use ",
 StyleBox["EmpiricalDistribution",
  FontFamily->"Courier"],
 " for both). Then I used ",
 StyleBox["RandomVariate",
  FontFamily->"Courier"],
 " to sample from the distributions, first producing a vector of die choices \
and then a vector rolls for each die choice. You\[CloseCurlyQuote]re not \
required to do it this way, as long as you produce correct and readable \
code."
}], "Text",
 CellChangeTimes->{{3.58499210831761*^9, 3.584992269479895*^9}, {
   3.584992305927824*^9, 3.584992605885792*^9}, {3.5849926396934137`*^9, 
   3.584992779654065*^9}, {3.585069175651806*^9, 3.585069213500437*^9}, 
   3.58577591122612*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Instructions and grading", "Subsection",
 CellChangeTimes->{{3.585775925664995*^9, 3.585775928352458*^9}}],

Cell[TextData[{
 "Please turn in your .m file containing the code and sufficient \
documentation to read and understand it.",
 StyleBox["  Refer to http://bio5495.wustl.edu/homework-submission.htm for \
directions on how to turn in assignments.",
  FontColor->GrayLevel[0]],
 "\n\nThe rubric for this is:\n\n2 point for turning in code that produces an \
output of the right form, consisting of a list of lists appropriate \
dimensions and containing appropriate integers. To get these points you must \
turn in your assignment on time.\n\n6 points for turning in code that passes \
all the tests distributed and is fully correct. Your code may pass all the \
tests without being a correct simulation of the process specified. The test \
suite just checks for obvious types of errors. Some of the tests are \
stochastic but they pass with very high probability if \
you\[CloseCurlyQuote]ve done everything right. Very occasionally they will \
fail on correct code, so if you\[CloseCurlyQuote]re sure your code is correct \
and you get a fail, run them again. If it fails again, your code is not \
correct. \n\n2 points for style (things such as capitalization and full, \
descriptive names) and legibility, including indentation, line breaks, and \
comments."
}], "Text",
 CellChangeTimes->{{3.58499210831761*^9, 3.584992269479895*^9}, {
  3.584992305927824*^9, 3.584992605885792*^9}, {3.5849926396934137`*^9, 
  3.584992779654065*^9}, {3.585069175651806*^9, 3.585069213500437*^9}, {
  3.58577591122612*^9, 3.5857759326650457`*^9}, {3.585776400743526*^9, 
  3.585776401503727*^9}, {3.585776473877668*^9, 3.585776474151823*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{942, 985},
WindowMargins->{{Automatic, 0}, {0, Automatic}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 105, 1, 86, "Section"],
Cell[687, 25, 2654, 55, 450, "Text"],
Cell[CellGroupData[{
Cell[3366, 84, 490, 13, 31, "Input"],
Cell[3859, 99, 389, 10, 31, "Output"]
}, Open  ]],
Cell[4263, 112, 704, 15, 69, "Text"],
Cell[CellGroupData[{
Cell[4992, 131, 180, 3, 31, "Input"],
Cell[5175, 136, 689, 19, 58, "Output"]
}, Open  ]],
Cell[5879, 158, 218, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[6122, 166, 102, 1, 49, "Subsection"],
Cell[6227, 169, 653, 14, 107, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6917, 188, 108, 1, 49, "Subsection"],
Cell[7028, 191, 1067, 25, 108, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8132, 221, 112, 1, 49, "Subsection"],
Cell[8247, 224, 1627, 25, 296, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
