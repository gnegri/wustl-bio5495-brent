(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    155930,       4332]
NotebookOptionsPosition[    138262,       3751]
NotebookOutlinePosition[    139045,       3780]
CellTagsIndexPosition[    138958,       3775]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Quickstart Guide"
}], "Title",
 CellChangeTimes->{{3.583164813062953*^9, 3.583164820794673*^9}}],

Cell[CellGroupData[{

Cell["Notebooks and cells", "Section",
 CellChangeTimes->{{3.583164854286798*^9, 3.583164857372426*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" is split into two parts: the front-end and the ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["kernel",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[".  You interact with ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" through the front end with a document called a ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["notebook",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[".   A notebook consists of a series of ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["cells",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[". Textual cells contain static text, whether it be a document \
title, section title, or the text you are reading right now. This is the word \
processor part. You can use it for creating documents like this one, but you \
can also use it just for documenting your code or keeping notes to yourself \
as you do exploratory data analysis. Input cells contain stuff that you want \
to send to the ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" kernel, which does the computations. Once the contents of an \
input cell is sent to the kernel (i.e. evaluated), the output of the \
computation (if any), is displayed in an output cell. For example, here is an \
input cell and the corresponding output cell.",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.583164924598127*^9, 3.583165293091897*^9}, {
   3.583165364072296*^9, 3.583165430028685*^9}, {3.5841267463099813`*^9, 
   3.584126754083334*^9}, {3.584126941785578*^9, 3.5841270557498493`*^9}, {
   3.584127086096953*^9, 3.58412709793601*^9}, {3.584127134417687*^9, 
   3.584127148799851*^9}, {3.5844474424331493`*^9, 3.5844474555138483`*^9}, {
   3.5844477811035223`*^9, 3.584447784806389*^9}, {3.584449857313232*^9, 
   3.584449942802973*^9}, 3.5844500619754457`*^9, {3.584450986849249*^9, 
   3.584451127304884*^9}, {3.584451267602113*^9, 3.584451272846917*^9}, 
   3.584465979527135*^9, 3.5844660446637373`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "+", "2"}], ")"}], 
  RowBox[{"(", 
   RowBox[{"x", "+", "1"}], ")"}]}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.5831652986191187`*^9, 3.5831653221566057`*^9}},
 CellLabel->"In[1]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"1", "+", "x"}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{"2", "+", "x"}], ")"}]}]], "Output",
 CellChangeTimes->{3.583165325512628*^9, 3.583234871231905*^9, 
  3.583235032805018*^9, 3.584468216127256*^9, 3.584468486196828*^9, 
  3.584471862398388*^9, 3.584639718995501*^9},
 CellLabel->"Out[1]="]
}, Open  ]],

Cell[TextData[{
 "First, notice that the input and output cells are identified by cell labels \
at the left. Second, notice that the kernel didn\[CloseCurlyQuote]t have much \
to say about this input, besides that it prefers to have the terms of \
polynomials ordered from lowest degree to highest. That\[CloseCurlyQuote]s \
because there isn\[CloseCurlyQuote]t any obviously better or simpler form for \
this expression than the form we provided it in. We can specifically ask ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " t",
 StyleBox["o expand this out using the built-in function ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Expand",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[":",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.583165485260301*^9, 3.5831658032038393`*^9}, {
   3.583235011789505*^9, 3.583235013921494*^9}, {3.583235052895368*^9, 
   3.5832350549933567`*^9}, 3.583236747525358*^9, {3.584128650434618*^9, 
   3.584128650799868*^9}, 3.584133046697221*^9, {3.584447488585433*^9, 
   3.584447532519273*^9}, {3.584447787847417*^9, 3.5844477883346167`*^9}, {
   3.5844483686197023`*^9, 3.5844483758819237`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "+", "2"}], ")"}], 
   RowBox[{"(", 
    RowBox[{"x", "+", "1"}], ")"}]}], "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.583165806402638*^9, 3.5831658252232037`*^9}},
 CellLabel->"In[2]:="],

Cell[BoxData[
 RowBox[{"2", "+", 
  RowBox[{"3", " ", "x"}], "+", 
  SuperscriptBox["x", "2"]}]], "Output",
 CellChangeTimes->{3.58316583117238*^9, 3.5832349146876*^9, 
  3.583235040817371*^9, 3.584468216270301*^9, 3.584468486275731*^9, 
  3.5844718624505*^9, 3.584639729698311*^9},
 CellLabel->"Out[2]="]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Practice: Creating and evaluating cells\[AliasDelimiter]\
\>", "Subsubsubsection",
 CellChangeTimes->{
  3.583241205964045*^9, {3.5833462197848043`*^9, 3.583346222370586*^9}, 
   3.5841278128341293`*^9, {3.58412786836483*^9, 3.5841278873743134`*^9}, 
   3.584127920504959*^9, {3.5844475594094057`*^9, 3.584447562079818*^9}, {
   3.58444779096729*^9, 3.5844477933339977`*^9}, 3.5844495200038347`*^9}],

Cell[TextData[{
 "Now you try it. Create a new cell directly below this one, either by using \
the down arrow key to move below the current cell or by clicking the mouse \
between this cell and the next. In your new cell, type the function ",
 StyleBox["Factor",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " followed by matching open and close square brackets, then between the \
square brackets type the result of the ",
 StyleBox["Expand",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " above, ",
 Cell[BoxData[
  RowBox[{"2", "+", 
   RowBox[{"3", " ", "x"}], "+", 
   RowBox[{"x", "^", "2"}]}]],
  CellChangeTimes->{3.58316583117238*^9},
  FontColor->GrayLevel[0]],
 StyleBox[". Since you are typing in an input cell (the default) your typing \
should come out in Courier font, like the input cells shown above. To send it \
to the ",
  FontColor->GrayLevel[0]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" kernel for evaluation, make sure your cursor is somewhere in the \
cell to evaluate, hold down the shift key, and press return. You should \
instantly get ",
  FontColor->GrayLevel[0]],
 StyleBox["(1+x)(2+x)",
  FontFamily->"Courier",
  FontColor->GrayLevel[0]],
 StyleBox[", i.e., a fac",
  FontColor->GrayLevel[0]],
 "tored form of ",
 Cell[BoxData[
  RowBox[{"2", "+", 
   RowBox[{"3", " ", "x"}], "+", 
   SuperscriptBox["x", "2"]}]],
  CellChangeTimes->{3.58316583117238*^9}],
 " in an output cell. Below that, make a new cell by using the down arrow and \
convert it to a text cell by the menu sequence Format -> Style -> Text. (A \
faster way to do this is to hold down the Alt or Command key and press 7). \
Now when you type, you should get a sans serif font like the one this text is \
in. Please enter a comment on how the result from ",
 StyleBox["Factor",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " compares to the input we originally gave to ",
 StyleBox["Expand",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.583165870732098*^9, 3.583166121099568*^9}, {
   3.5831756447422857`*^9, 3.583175717748807*^9}, {3.583175829117854*^9, 
   3.583175862380364*^9}, {3.583175893380278*^9, 3.583176103468589*^9}, {
   3.583176135468492*^9, 3.583176282710209*^9}, {3.583236818277836*^9, 
   3.583236822497311*^9}, {3.583236855109214*^9, 3.583236876610025*^9}, {
   3.5833462784716663`*^9, 3.5833463457061243`*^9}, {3.583425934746427*^9, 
   3.583425946378171*^9}, {3.584127547833528*^9, 3.584127550096912*^9}, {
   3.584127654475884*^9, 3.584127661197666*^9}, 3.584128169048728*^9, {
   3.584447426577335*^9, 3.58444742864212*^9}, {3.5844476144929953`*^9, 
   3.5844476251875467`*^9}, {3.584447795531479*^9, 3.584447800390973*^9}, 
   3.584448128849823*^9, {3.6091715383740873`*^9, 3.609171546169731*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Factor", "[", 
  RowBox[{"2", "+", 
   RowBox[{"3", "x"}], "+", 
   SuperscriptBox["x", "2"]}], "]"}]], "Input",
 CellChangeTimes->{{3.609171547562273*^9, 3.609171566815899*^9}},
 CellLabel->"In[85]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"1", "+", "x"}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{"2", "+", "x"}], ")"}]}]], "Output",
 CellChangeTimes->{3.609171572356152*^9},
 CellLabel->"Out[85]="]
}, Open  ]],

Cell[TextData[{
 StyleBox["Factor", "Input"],
 " orders polynomials in increasing degree."
}], "Text",
 CellChangeTimes->{{3.609171596645857*^9, 3.609171619709238*^9}}],

Cell[TextData[StyleBox["\[FilledSquare]",
 FontColor->GrayLevel[0]]], "Text",
 CellChangeTimes->{{3.609171551565618*^9, 3.609171552341631*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Practice: Creating, using, and saving a new notebook ", \
"Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
   3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
   3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, 
   3.584127826015929*^9, {3.5841279253004704`*^9, 3.584127950559352*^9}, 
   3.5841285647554817`*^9, 3.584449399115344*^9}],

Cell[TextData[{
 "Whenever you start something new, you\[CloseCurlyQuote]ll want to create a \
new notebook. You can do that when you first open ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " from the top left of the welcome screen, or if you\[CloseCurlyQuote]re in \
the middle of a session, by the menu sequence File -> New -> Notebook. Create \
a new notebook, then do the following"
}], "Text",
 CellChangeTimes->{{3.5832372570807*^9, 3.583237368865171*^9}, {
  3.5832374228254557`*^9, 3.5832374302256737`*^9}, {3.583241539467763*^9, 
  3.583241548632917*^9}, {3.5832415930256147`*^9, 3.583241622320819*^9}, {
  3.58324501032955*^9, 3.5832450136407557`*^9}, {3.5833463858602743`*^9, 
  3.58334638847545*^9}, {3.584128019184778*^9, 3.5841280211592827`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Go to the Palettes menu and select \[OpenCurlyDoubleQuote]Writing Assistant\
\[CloseCurlyDoubleQuote]. This palette serves more-or-less as a word \
processing menu that allows you to do the usual things, like choosing font \
sizes and colors, paragraph style, etc. One of the main differences with an \
ordinary word processor is that the document is organized in cells so there \
are ways to change cell properties, such as the background shading, as well \
as cell styles, which are collections of properties. Another difference is \
that formatting of mathematical expressions is very convenient via the \
\[OpenCurlyDoubleQuote]Typesetting\[CloseCurlyDoubleQuote] section of the \
palette.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.583245018372472*^9, 3.583245082809845*^9}, {
   3.5832451148251657`*^9, 3.583245159683543*^9}, {3.583346405325222*^9, 
   3.583346525490797*^9}, {3.5833465835750313`*^9, 3.58334668295181*^9}, {
   3.584447803166031*^9, 3.584447805198084*^9}, 3.584466206590352*^9}],

Cell[TextData[{
 "In your new notebook, use the Format -> Style to apply the Title style to \
the first cell and type into to give your notebook a title, such as \
\[OpenCurlyDoubleQuote]Michael\[CloseCurlyQuote]s First ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Notebook\[CloseCurlyDoubleQuote]. "
}], "ItemNumbered",
 CellChangeTimes->{{3.583245018372472*^9, 3.583245082809845*^9}, {
  3.5832451148251657`*^9, 3.583245159683543*^9}, {3.583346405325222*^9, 
  3.583346525490797*^9}, {3.5833465835750313`*^9, 3.5833468204259853`*^9}, {
  3.584994014089047*^9, 3.584994072845471*^9}}],

Cell[TextData[{
 "In your new notebook, create a new cell and compute the factorial of 101 by \
evaluating the expression ",
 StyleBox["101!",
  FontFamily->"Courier"],
 ". Then do the same for ",
 StyleBox["100!",
  FontFamily->"Courier"],
 ". Now divide the first result by the second. You can reference the previous \
results using the labels, such Out[1] or Out[2]. "
}], "ItemNumbered",
 CellChangeTimes->{{3.583245018372472*^9, 3.583245082809845*^9}, 
   3.5832451148251657`*^9, {3.583346537678335*^9, 3.583346548515272*^9}, {
   3.583346827950342*^9, 3.583346836619183*^9}, {3.583346922524437*^9, 
   3.583346931010233*^9}, {3.583346979372509*^9, 3.5833470978272057`*^9}, {
   3.583349915062324*^9, 3.583349935819065*^9}, {3.583350064117671*^9, 
   3.5833500654456053`*^9}, 3.583350157965242*^9, {3.584993725806117*^9, 
   3.584993732151127*^9}}],

Cell[TextData[{
 "Use the menu sequence File -> Save and save your notebook as a file called \
FirstNotebook-Name where \[OpenCurlyDoubleQuote]Name\[CloseCurlyDoubleQuote] \
is your name. Now ",
 StyleBox["double-",
  FontColor->RGBColor[0., 0., 0.]],
 "clicking on this file should open it up in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". "
}], "ItemNumbered",
 CellChangeTimes->{{3.583245018372472*^9, 3.5832450827931128`*^9}, {
   3.583350275298986*^9, 3.583350432794273*^9}, {3.583425967027441*^9, 
   3.58342596703082*^9}, 3.5841283009990463`*^9, 3.5841283564725227`*^9}]
}, Open  ]],

Cell["Done, see FirstNotebook-GrantNegri.nb", "Text",
 CellChangeTimes->{{3.609169449275058*^9, 3.6091694632869577`*^9}, {
  3.609171646004203*^9, 3.609171649931447*^9}}],

Cell["\[FilledSquare]", "Text",
 CellChangeTimes->{{3.583245018372472*^9, 3.5832450827931128`*^9}, {
  3.583350275298986*^9, 3.583350432794273*^9}, {3.583425967027441*^9, 
  3.5834259733001127`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["How to think about Notebooks", "Subsection",
 CellChangeTimes->{{3.583350467683083*^9, 3.583350488058688*^9}}],

Cell[TextData[{
 "Most people think about programming in terms of writing code in one file, \
then either compiling the file into something you can run from a command line \
or loading it into an interactive interpreter, where you can call each of the \
individual functions you\[CloseCurlyQuote]ve defined and see the result. One \
of the possible uses of a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebook is as an interpreter for ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expressions. To stick most closely to the normal model, you would write \
your code in a separate file, which typically has the extension \
\[OpenCurlyDoubleQuote].m\[CloseCurlyDoubleQuote] and is referred to in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " documentation as a e",
 StyleBox["ither a ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["script file",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" or a ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["package file",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" (the difference is not important for now). Y",
  FontColor->RGBColor[0., 0., 0.]],
 "ou can edit the file using a text editor such as ",
 StyleBox["Emacs",
  FontFamily->"Courier"],
 " or ",
 StyleBox["Vi",
  FontFamily->"Courier"],
 ", or you can use Wolfram Workbench, an IDE (Integrated Development \
Environment) based on the open-source Eclipse. In this class, we strongly \
encourage development in Workbench. \n\nYou can develop code in Workbench and \
use a notebook as the interpreter. If you use a new notebook cell for each \
interaction and save your notebook at the end, all the interactions are saved \
for later reference. Often most of them are not worth saving because you\
\[CloseCurlyQuote]re just trying to figure out how to get something to work \
and once it does the failed attempts are no longer useful. Thus, it is often \
worthwhile to reuse the same input cell, editing and reevaluting it until you \
get a result you want to save. The output from each evaluation of a cell will \
overwrite the output of the previous evaluation. It\[CloseCurlyQuote]s also \
worth deleting some of the less interesting cells you\[CloseCurlyQuote]ve \
created at the end of the session. "
}], "Text",
 CellChangeTimes->{{3.5833505020273438`*^9, 3.583350721483019*^9}, {
   3.5833508489190807`*^9, 3.583350906402923*^9}, {3.583425115125099*^9, 
   3.583425290931264*^9}, {3.5834254234269743`*^9, 3.5834254700104647`*^9}, {
   3.583425531778398*^9, 3.583425532866619*^9}, {3.583425566563981*^9, 
   3.583425920274268*^9}, {3.583426001339323*^9, 3.583426021062698*^9}, {
   3.583498895250642*^9, 3.5834989141294413`*^9}, {3.5841285113923683`*^9, 
   3.5841285291028023`*^9}, 3.584447767087306*^9, {3.584447814559413*^9, 
   3.5844478243743677`*^9}, {3.584448130523559*^9, 3.5844481364759703`*^9}, 
   3.5844662940220747`*^9, {3.584466426509294*^9, 3.5844667080498238`*^9}, {
   3.5846407870566673`*^9, 3.5846408636387672`*^9}, {3.584640898434252*^9, 
   3.584640905366434*^9}, 3.584993801677109*^9, {3.58548897226451*^9, 
   3.585489085363*^9}}],

Cell[CellGroupData[{

Cell["Practice: Reusing a notebook cell", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}}],

Cell[TextData[{
 StyleBox["The following computation creates a list, or table, of the exact \
values of ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["x Log2[x]",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" for several values of x.",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.5841286853046713`*^9, 3.584128700095504*^9}, {
  3.584128810813657*^9, 3.5841288661501083`*^9}, {3.584128919970653*^9, 
  3.584128937362607*^9}, {3.584129161785049*^9, 3.584129167893005*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"N", "[", 
    RowBox[{"x", " ", 
     RowBox[{"Log2", "[", "x", "]"}]}], "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "1", ",", " ", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.583426067539361*^9, 3.58342613857296*^9}, {
  3.583426497035657*^9, 3.583426503619988*^9}, {3.583426537757368*^9, 
  3.583426543420322*^9}, {3.6091694868484087`*^9, 3.6091694902572937`*^9}},
 CellLabel->"In[4]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.`", ",", "2.`", ",", "4.754887502163468`", ",", "8.`", ",", 
   "11.609640474436812`", ",", "15.509775004326935`", ",", 
   "19.651484454403228`", ",", "24.`", ",", "28.529325012980813`", ",", 
   "33.21928094887363`"}], "}"}]], "Output",
 CellChangeTimes->{3.5834261432604113`*^9, 3.583426504906973*^9, 
  3.5834265441682177`*^9, 3.584468216313377*^9, 3.584468486324698*^9, 
  3.584471862501069*^9, 3.609169491050393*^9},
 CellLabel->"Out[4]="]
}, Open  ]],

Cell[TextData[{
 StyleBox["{x, 1, 10}", "Input",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" evaluates the previous function on ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["x", "Input",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" from ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["1", "Input",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" to ",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["10", "Input",
  FontColor->RGBColor[1, 0, 0]]
}], "Text",
 CellChangeTimes->{{3.6091695012923203`*^9, 3.609169554245788*^9}}],

Cell[TextData[{
 "S",
 StyleBox["uppose you wanted the numbers expressed as floating point \
approximations, rather than ratios of natural logarithms. To do so, you need \
to wrap the function ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["N",
  FontFamily->"Courier",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" around the ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["x ",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Log2",
  FontFamily->"Courier",
  FontWeight->"Bold",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["[x]",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[". Edit the contents of the input cell above so that you will get \
floating point approximatio",
  FontColor->RGBColor[0., 0., 0.]],
 "ns and use Shift-Return to evaluate it. Note how the output overwrites the \
old output. Now create a new text cell between the output and this paragraph \
and write a comment in red (you can change the font color using the Writ",
 StyleBox["ing Assistant pal",
  FontColor->GrayLevel[0]],
 "ette) regarding the effect of the second argument we gave to ",
 StyleBox["Table",
  FontFamily->"Courier"],
 ", namely, ",
 StyleBox["{x, 1, 10}",
  FontFamily->"Courier"],
 ". If you\[CloseCurlyQuote]re not sure, you can either experiment or you can \
look up  the documentation on ",
 StyleBox["Table",
  FontFamily->"Courier"],
 " by using the menu sequence Help -> Documentation Center and typing ",
 StyleBox["Table",
  FontFamily->"Courier"],
 " into the search bar. "
}], "Text",
 CellChangeTimes->{{3.583426184693366*^9, 3.583426339971405*^9}, {
   3.5834264158130627`*^9, 3.583426445690782*^9}, {3.5834264776145144`*^9, 
   3.5834264929469147`*^9}, {3.5834265557410107`*^9, 3.583426663794897*^9}, {
   3.583426708555833*^9, 3.583426767882607*^9}, {3.58342685475268*^9, 
   3.5834269609407787`*^9}, {3.583499286870441*^9, 3.583499305489765*^9}, {
   3.584128970435548*^9, 3.58412902648272*^9}, {3.584129094396899*^9, 
   3.584129096268752*^9}, {3.584466798695335*^9, 3.584466810428084*^9}, {
   3.5849938779400387`*^9, 3.584993891369049*^9}, {3.6091697448837013`*^9, 
   3.609169745758258*^9}, 3.6091715028144703`*^9}],

Cell["\<\
To delete a cell, or change anything about its formatting, you must select \
the cell by selecting the innermost bracket to the right of the cell. Cells \
are organized into a hierarchical structure which is indicated by the \
bracketing at right, so if you want you can select higher level cells such as \
the one for an entire section or subsection of a notebook.\
\>", "Text",
 CellChangeTimes->{3.585489093252442*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Practice: Selecting cells", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.5854898764212112`*^9, 
  3.585489879731243*^9}}],

Cell[BoxData[
 RowBox[{"Select", " ", "this", " ", "cell", " ", "and", " ", "then", " ", 
  "use", " ", "the", " ", "\"\<Format\>\"", " ", "dropdown", " ", 
  RowBox[{"menu", " ", "[", 
   RowBox[{
    RowBox[{"or", " ", "Alt"}], "+", "9"}], "]"}], "to", " ", "format", " ", 
  "it", " ", "as", " ", "an", " ", "input", " ", 
  RowBox[{"cell", "."}]}]], "Input",
 CellChangeTimes->{{3.5854899883960457`*^9, 3.585490055068061*^9}, {
  3.6091695748621387`*^9, 3.60916958599899*^9}}],

Cell["\[FilledSquare] ", "Text",
 CellChangeTimes->{{3.609171507662236*^9, 3.609171510198522*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " documentation"
}], "Section",
 CellChangeTimes->{{3.583498969278222*^9, 3.5834989897771177`*^9}, {
  3.58349909157749*^9, 3.583499099401623*^9}, {3.5834991543301697`*^9, 
  3.583499185841704*^9}, {3.5844478338392878`*^9, 3.5844478343669567`*^9}}],

Cell[TextData[{
 StyleBox["Your ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" installation comes with vast amounts of documentation. To access \
it, use the menu sequence Help -> Documentation Center. The most important \
thing in the documentation center is the search bar at the top. You can think \
of this as a web browser. Type in whatever it is you want to know about, look \
over the list of pages that comes back, and start reading the ones that look \
promising. You will do this many times and spend a lot of time reading the \
documentation. This can be a frustrating process because you will often get a \
lot of reference information but not the introduction to the big concepts \
needed to understand the system. All I can say is, \[OpenCurlyDoubleQuote]I\
\[CloseCurlyQuote]m sorry\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]Get used to it\[CloseCurlyDoubleQuote]. I will try to \
fill in the big concepts whenever I can, but you should expect to spend a \
fair amount of time being confused and a fair amount of time browsing from \
one help page to another trying to get a foothold. \n",
  FontColor->RGBColor[0., 0., 0.]],
 "\nThere are several categories of documentation pages, including"
}], "Text",
 CellChangeTimes->{{3.583499220337791*^9, 3.5834992658978987`*^9}, {
  3.583499319121522*^9, 3.5834995099774446`*^9}, {3.5834995569935427`*^9, 
  3.5834996335938377`*^9}, {3.583499666310273*^9, 3.583499742578568*^9}, {
  3.584129198880324*^9, 3.584129240973604*^9}, {3.584129309205097*^9, 
  3.584129310252326*^9}, {3.584447839453771*^9, 3.584447839662661*^9}, {
  3.584447890494486*^9, 3.58444790072674*^9}, {3.5844521362846327`*^9, 
  3.584452137097991*^9}, {3.584466895775999*^9, 3.584466908479267*^9}, {
  3.584994206548884*^9, 3.584994220262559*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Tutorials. These are ve",
 StyleBox["ry useful and",
  FontColor->GrayLevel[0]],
 " include some of the basic concepts you will need. I suggest reading a \
tutorial first whenever you can find a relevant one.  You can see an example \
by going to the doc center, typing or pasting ",
 StyleBox["tutorial/InterruptingCalculations",
  FontFamily->"Courier"],
 " into the search bar, and pushing return."
}], "Item",
 CellChangeTimes->{{3.583499744786683*^9, 3.583499796701165*^9}, {
  3.583500289423687*^9, 3.583500342077166*^9}, {3.5841293555192137`*^9, 
  3.584129355669614*^9}}],

Cell[TextData[{
 "How Tos. You can see an example by going to the doc center, typing or \
pasting ",
 StyleBox["howto/StopAComputation",
  FontFamily->"Courier"],
 " into the search bar, and pushing return. Unfortunately, simply typing in \
\[OpenCurlyDoubleQuote]How to stop a computation\[CloseCurlyDoubleQuote] \
draws a blank."
}], "Item",
 CellChangeTimes->{{3.583499744786683*^9, 3.583499801077017*^9}, {
  3.583499862105481*^9, 3.583499866289667*^9}, {3.583500022258106*^9, 
  3.583500025057375*^9}, {3.583500090219466*^9, 3.583500193945484*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " guides."
}], "Item",
 CellChangeTimes->{{3.583499744786683*^9, 3.583499801073547*^9}, {
   3.583499867801257*^9, 3.5834998747398853`*^9}, {3.584129625142061*^9, 
   3.5841296418187513`*^9}, 3.58444814607749*^9, {3.5844522045208483`*^9, 
   3.584452204705892*^9}}],

Cell[TextData[{
 "Reference material, especially on built-in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions and symbols. The reference pages for built-in functions (e.g. ",
 StyleBox["Table",
  FontFamily->"Courier"],
 ") have a fixed structure. In the search bar at the top of the doc center or \
any other documentation page, search ",
 StyleBox["Table",
  FontFamily->"Courier"],
 " now -- the reference page should display right away."
}], "Item",
 CellChangeTimes->{{3.583499744786683*^9, 3.583499801073547*^9}, {
   3.583499867801257*^9, 3.5834999287538757`*^9}, {3.5834999684104567`*^9, 
   3.583499992074588*^9}, {3.583500649906506*^9, 3.583500654378336*^9}, {
   3.583500692564271*^9, 3.583500926121484*^9}, {3.5835010387953663`*^9, 
   3.583501045921648*^9}, {3.583501096007538*^9, 3.583501187146337*^9}, {
   3.5835012571617393`*^9, 3.5835014416334763`*^9}, {3.5835015669703503`*^9, 
   3.5835016694256783`*^9}, {3.584130141084016*^9, 3.584130142762987*^9}, {
   3.584447947631198*^9, 3.584447947829571*^9}, {3.584467013382531*^9, 
   3.5844670138042*^9}, {3.584467087201333*^9, 3.584467094604373*^9}, 
   3.584994289862949*^9, 3.5849943438016148`*^9}],

Cell[CellGroupData[{

Cell["\<\
In large, black type you\[CloseCurlyQuote]ll see the title of the page, which \
is the name of the function.\
\>", "Subitem",
 CellChangeTimes->{3.584994358023192*^9}],

Cell["\<\
Above that, and to the right, are drop-down menus for accessing related \
documentation by type -- in this case, there is a menu listing several \
related tutorials, another one listing guides, and a \
\[OpenCurlyDoubleQuote]See Also\[CloseCurlyDoubleQuote] which lists related \
reference pages. Quite often, it will be worth your while to look at the \
guides and tutorials before reading reference pages, although sometimes the \
reference pages will give you what you want faster. You\[CloseCurlyQuote]ll \
have to develop your own personal documentation reading style over time. \
\>", "Subitem",
 CellChangeTimes->{{3.5849944057941628`*^9, 3.584994416022517*^9}}],

Cell["\<\
Below the title you\[CloseCurlyQuote]ll see one or more cells with yellow \
backgrounds, each showing a template for how you can call the function with \
various argument types and a very brief description of what each one does. \
This is useful mainly if you already know one way to use the function and you\
\[CloseCurlyQuote]re looking for variants. \
\>", "Subitem",
 CellChangeTimes->{{3.5849944057941628`*^9, 3.584994436339147*^9}}],

Cell["\<\
Below the yellow boxes is a section called Details which is closed by \
default. More often than not, you\[CloseCurlyQuote]ll want to leave that \
closed until you\[CloseCurlyQuote]ve looked at part of the next section, \
titled Examples.\
\>", "Subitem",
 CellChangeTimes->{{3.5849944057941628`*^9, 3.5849944522343693`*^9}}],

Cell["\<\
The Examples section shows examples of what you can do with the function. In \
some cases you will be able to use these as templates for building your \
expressions. It is often useful to read through at least the subsection \
titled Basic Examples. I find that I am tempted to keep reading examples, but \
there are often a lot of them and it is not always as useful to read them all \
as to glance over the Details section and then look for related tutorials. \
However, if you know this is the function you want to use and you\
\[CloseCurlyQuote]re trying to do something complicated with it, reading all \
the examples can be helpful.\
\>", "Subitem",
 CellChangeTimes->{{3.5849944057941628`*^9, 3.5849944790117693`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 StyleBox["You can also look up a function\[CloseCurlyQuote]s usage directly \
in a notebook by typing ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["?FunctionName",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[", where FunctionName is the name of the function.  For example, ",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.584130176322619*^9, 3.584130203407522*^9}, {
  3.584130248386215*^9, 3.584130311403799*^9}, {3.584130423341981*^9, 
  3.58413044904421*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Table"}]], "Input",
 CellChangeTimes->{{3.584130337430429*^9, 3.58413033866642*^9}},
 CellLabel->"In[191]:="],

Cell[BoxData[
 RowBox[{
  StyleBox["\<\"\!\(\*RowBox[{\\\"Table\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]], \\\"}\\\"}]}], \\\"]\\\"}]\) generates a list of \
\!\(\*SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]]\) copies of \!\(\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\). \
\\n\!\(\*RowBox[{\\\"Table\\\", \\\"[\\\", RowBox[{StyleBox[\\\"expr\\\", \
\\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{StyleBox[\\\"i\\\", \\\"TI\
\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"max\\\", \\\"TI\\\"]]}], \\\"}\\\"}]}], \\\"]\\\"}]\) generates \
a list of the values of \!\(\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\) when \
\!\(\*StyleBox[\\\"i\\\", \\\"TI\\\"]\) runs from 1 to \
\!\(\*SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]]\). \\n\!\(\*RowBox[{\\\"Table\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"min\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"max\\\", \\\"TI\\\"]]}], \\\"}\\\"}]}], \\\"]\\\"}]\) starts \
with \!\(\*RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\"=\\\", \
SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"min\\\", \
\\\"TI\\\"]]}]\). \\n\!\(\*RowBox[{\\\"Table\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"min\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"max\\\", \\\"TI\\\"]], \\\",\\\", StyleBox[\\\"di\\\", \
\\\"TI\\\"]}], \\\"}\\\"}]}], \\\"]\\\"}]\) uses steps \
\!\(\*StyleBox[\\\"di\\\", \\\"TI\\\"]\). \\n\!\(\*RowBox[{\\\"Table\\\", \
\\\"[\\\", RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"i\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}]}], \\\"}\\\"}]}], \\\"]\\\"}]\) \
uses the successive values \!\(\*SubscriptBox[StyleBox[\\\"i\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]]\), \!\(\*SubscriptBox[StyleBox[\
\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]]\), \[Ellipsis].\\n\!\
\(\*RowBox[{\\\"Table\\\", \\\"[\\\", RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\
\"], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"min\\\", \\\"TI\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]]}], \\\"}\\\"}], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{StyleBox[\\\"j\\\", \\\"TI\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"j\\\", \\\"TI\\\"], StyleBox[\\\"min\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"j\\\", \\\"TI\\\"], \
StyleBox[\\\"max\\\", \\\"TI\\\"]]}], \\\"}\\\"}], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"]\\\"}]\) gives a nested list. The list \
associated with \!\(\*StyleBox[\\\"i\\\", \\\"TI\\\"]\) is outermost.\"\>", 
   "MSG"], "\[NonBreakingSpace]", 
  ButtonBox[
   StyleBox["\[RightSkeleton]", "SR"],
   Active->True,
   BaseStyle->"Link",
   ButtonData->"paclet:ref/Table"]}]], "Print", "PrintUsage",
 CellChangeTimes->{3.584471862761372*^9},
 CellTags->"Info3584453862-7388097"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Another resource for finding information on functions is with the \
Help->Function Navigator.  The Function Navigator lists a hierarchical view \
of ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["\[CloseCurlyQuote]s functions.",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.5844523112009087`*^9, 3.584452425800301*^9}, {
   3.58445245649606*^9, 3.584452481848098*^9}, 3.584453575664426*^9}],

Cell[CellGroupData[{

Cell["\<\
Practice: Reading documentation 1\
\>", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583501688676094*^9, 3.583501695051704*^9}, {
  3.583502971350781*^9, 3.583502972452298*^9}}],

Cell[TextData[{
 "Go to the reference page for ",
 StyleBox["Table",
  FontFamily->"Courier"],
 ". "
}], "Text",
 CellChangeTimes->{{3.583501950809888*^9, 3.583502008969513*^9}, {
   3.583502046666016*^9, 3.583502119217896*^9}, 3.58350221565024*^9}],

Cell[TextData[{
 "In a new text cell below this one, write the names of all the tutorials \
that are in the list of tutorials at the top of the page. You\
\[CloseCurlyQuote]ll have to change the style of your cell to \
\[OpenCurlyDoubleQuote]text\[CloseCurlyDoubleQuote] so it doesn\
\[CloseCurlyQuote]t ",
 StyleBox["get interpreted as an input cell.",
  FontColor->RGBColor[0., 0., 0.]]
}], "ItemNumbered",
 CellChangeTimes->{
  3.583502141516714*^9, {3.5835022022757874`*^9, 3.583502241313575*^9}, {
   3.584129904402978*^9, 3.584129937759644*^9}, {3.584130013679502*^9, 
   3.584130023561453*^9}, {3.584467486653377*^9, 3.584467487108156*^9}}],

Cell["\<\
Repetitive Operations
Making Tables of Values
Evaluation in Iteration Functions
Vectors and Matrices
Tensors\
\>", "Text",
 CellChangeTimes->{{3.609169650332135*^9, 3.609169702180751*^9}}],

Cell[TextData[{
 "Read the basic examples on the ",
 StyleBox["Table",
  FontFamily->"Courier"],
 " reference page. In a new input cell below this one, write an expression \
using ",
 StyleBox["Table",
  FontFamily->"Courier"],
 " that, when evaluated, outputs a list of the cubes of all the integers \
between 1 and 12, inclusive. (You can use the notation ",
 StyleBox["x^3",
  FontFamily->"Courier"],
 " for ",
 StyleBox["x",
  FontFamily->"Courier"],
 " cubed.) In another new input cell, write an expression that uses ",
 StyleBox["Table",
  FontFamily->"Courier"],
 " to list the cubes of the numbers 0.2, 0.3, ..., 0.7."
}], "ItemNumbered",
 CellChangeTimes->{
  3.583502141516714*^9, {3.5835022022757874`*^9, 3.583502220017521*^9}, {
   3.583502251985673*^9, 3.583502397075473*^9}, {3.5835025114893227`*^9, 
   3.583502533833376*^9}, {3.583504501577125*^9, 3.583504520712249*^9}, {
   3.58500423894077*^9, 3.585004276638291*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   SuperscriptBox["x", "3"], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "12"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.609169756369628*^9, 3.609169783951749*^9}},
 CellLabel->"In[5]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "8", ",", "27", ",", "64", ",", "125", ",", "216", ",", "343", 
   ",", "512", ",", "729", ",", "1000", ",", "1331", ",", "1728"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.6091697844545937`*^9},
 CellLabel->"Out[5]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   SuperscriptBox["x", "3"], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", ".2", ",", ".7", ",", ".1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.609169795372106*^9, 3.609169817950631*^9}},
 CellLabel->"In[6]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.008000000000000002`", ",", "0.02700000000000001`", ",", 
   "0.06400000000000002`", ",", "0.125`", ",", "0.21600000000000008`", ",", 
   "0.3429999999999999`"}], "}"}]], "Output",
 CellChangeTimes->{3.609169819188122*^9},
 CellLabel->"Out[6]="]
}, Open  ]],

Cell["\[FilledSquare]", "Text",
 CellChangeTimes->{
  3.583502141516714*^9, {3.5835022022757874`*^9, 3.583502220017521*^9}, {
   3.583502251985673*^9, 3.583502397075473*^9}, {3.5835025114893227`*^9, 
   3.583502533833376*^9}, {3.583504501577125*^9, 3.58350452571144*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Incorporated reading", "Subsection",
 CellChangeTimes->{{3.5835042889056587`*^9, 3.583504292690262*^9}}],

Cell[TextData[{
 "There\[CloseCurlyQuote]s no point to my trying to rewrite tutorials and \
documentation on all the stuff that\[CloseCurlyQuote]s already included in \
the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " documentation. Instead, I will do some introducing, sequencing, and \
provision of relevant Practices and Exercises. In between these, I\
\[CloseCurlyQuote]ll ask you to read particular documentation pages as though \
they were incorporated into this document. That means as soon as you see a \
section titled \[OpenCurlyDoubleQuote]Incorporated reading,\
\[CloseCurlyDoubleQuote] you should go off and read whatever pages are \
referenced there, then come back and continue working with this document. \
Right now, please read  "
}], "Text",
 CellChangeTimes->{{3.583504310930181*^9, 3.5835044958021383`*^9}, 
   3.5850055601292667`*^9, 3.585005614623197*^9}],

Cell[TextData[{
 "howto/CreateLists. You can also get an html version of this page from a web \
browser at http://reference.wolfram.com/mathematica/howto/CreateLists.html. \
This site, which contains all the documentation with the obvious mapping to \
the URL, might occasionally be useful if you don\[CloseCurlyQuote]t have ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " open or can\[CloseCurlyQuote]t open it for some reason."
}], "Item",
 CellChangeTimes->{{3.5835048546481113`*^9, 3.583504965298663*^9}, 
   3.5844506323481617`*^9}],

Cell[CellGroupData[{

Cell["\<\
Practice: Making lists and vectors\
\>", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}}],

Cell[TextData[{
 StyleBox["From now on, do all assignments that are in ",
  FontSlant->"Plain"],
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 StyleBox[" notebooks by creating new cells immediately below the assignment, \
unless it is specified that they should be done in a new notebook. Save your \
modified copy of the notebook containing the assignments by appending a dash \
followed by your name to the end of the original filename, before the \
\[OpenCurlyDoubleQuote].nb\[CloseCurlyDoubleQuote] suffix. By affixing your \
name, you affirm that you typed any modifications to the original file \
yourself. Copying modified assignment files or portions thereof, or \
distributing them to others, or placing them in a location where others can \
easily grab them, is considered cheating. You can get help and advice, but \
you must do all the typing yourself.",
  FontSlant->"Plain"]
}], "Text",
 CellChangeTimes->{{3.583505589580686*^9, 3.583505751777648*^9}, {
  3.5835059370388203`*^9, 3.583505956274063*^9}, {3.583506110576619*^9, 
  3.5835062466814547`*^9}},
 FontSlant->"Italic"],

Cell[TextData[{
 "Make the same two lists of cubes you did with ",
 StyleBox["Table",
  FontFamily->"Courier"],
 ", but now do it  with ",
 StyleBox["Range",
  FontFamily->"Courier"],
 ". As demonstrated in the \[OpenCurlyDoubleQuote]howto\
\[CloseCurlyDoubleQuote] for creating lists, use ",
 StyleBox["Range",
  FontFamily->"Courier"],
 " to create a list of numbers and then apply the cubing operation to the \
entire list."
}], "ItemNumbered",
 CellChangeTimes->{{3.583505152049571*^9, 3.583505152186013*^9}, {
  3.5835052216601667`*^9, 3.5835052824336643`*^9}, {3.5835053500348253`*^9, 
  3.583505395777787*^9}, {3.583505453420312*^9, 3.5835054612018013`*^9}, {
  3.5835055020678368`*^9, 3.583505520582569*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"Range", "[", "12", "]"}], "3"]], "Input",
 CellChangeTimes->{{3.6091698337146463`*^9, 3.609169834427629*^9}, {
  3.609169866534305*^9, 3.60916987038089*^9}},
 CellLabel->"In[7]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "8", ",", "27", ",", "64", ",", "125", ",", "216", ",", "343", 
   ",", "512", ",", "729", ",", "1000", ",", "1331", ",", "1728"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.609169870890353*^9},
 CellLabel->"Out[7]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 SuperscriptBox[
  RowBox[{"Range", "[", 
   RowBox[{".2", ",", ".7", ",", ".1"}], "]"}], "3"]], "Input",
 CellChangeTimes->{{3.609169874622397*^9, 3.6091698867652683`*^9}},
 CellLabel->"In[8]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.008000000000000002`", ",", "0.02700000000000001`", ",", 
   "0.06400000000000002`", ",", "0.125`", ",", "0.21600000000000008`", ",", 
   "0.3429999999999999`"}], "}"}]], "Output",
 CellChangeTimes->{3.609169887302438*^9},
 CellLabel->"Out[8]="]
}, Open  ]],

Cell["\<\
Create a \[OpenCurlyDoubleQuote]matrix\[CloseCurlyDoubleQuote] (i.e. list of \
lists) with 7 rows and 3 columns containing random integers between 17 and \
23. First display it as a list of lists, and then in matrix form.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.583505152049571*^9, 3.583505152186013*^9}, {
  3.5835052216601667`*^9, 3.5835052824336643`*^9}, {3.5835053500348253`*^9, 
  3.583505395777787*^9}, {3.583505453420312*^9, 3.5835054612018013`*^9}, {
  3.5835055020678368`*^9, 3.5835055818654757`*^9}, {3.58350600830997*^9, 
  3.583506017305415*^9}, {3.58350770687451*^9, 3.58350770778542*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"17", ",", "23"}], "]"}], ",", "3"}], "]"}], ",", 
   RowBox[{"{", "7", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.609169924799015*^9, 3.609169999819625*^9}, {
  3.609170032703515*^9, 3.609170135702014*^9}, {3.609170175031405*^9, 
  3.6091701753107443`*^9}, {3.609170236622472*^9, 3.609170284982348*^9}},
 CellLabel->"In[26]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"22", ",", "19", ",", "23"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"18", ",", "17", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"21", ",", "22", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"18", ",", "20", ",", "19"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "20", ",", "21"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"23", ",", "19", ",", "18"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"17", ",", "20", ",", "19"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6091702542210007`*^9, 3.6091702854666557`*^9}},
 CellLabel->"Out[26]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.609170090738278*^9, 3.609170095493292*^9}},
 CellLabel->"In[27]:="],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"22", "19", "23"},
     {"18", "17", "20"},
     {"21", "22", "19"},
     {"18", "20", "19"},
     {"17", "20", "21"},
     {"23", "19", "18"},
     {"17", "20", "19"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.6091700961527348`*^9, 3.609170108521316*^9}, 
   3.609170138915338*^9, 3.609170178691505*^9, {3.6091702568729153`*^9, 
   3.609170287069384*^9}},
 CellLabel->"Out[27]//MatrixForm="]
}, Open  ]],

Cell["\[FilledSquare]", "Text",
 CellChangeTimes->{{3.583507713241353*^9, 3.58350771326298*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Programming in Mathematica", "Section",
 CellChangeTimes->{{3.5835078847461367`*^9, 3.583507893009742*^9}}],

Cell[CellGroupData[{

Cell["Defining variables and functions", "Subsection",
 CellChangeTimes->{{3.583507948945867*^9, 3.583507957089349*^9}, {
  3.583508228873707*^9, 3.583508230665696*^9}}],

Cell["\<\
In order to understand variables and functions, we need to touch briefly on \
how the kernel works. If you are used to interpreters in other languages, it \
works pretty much the same way. Apply built-in mathematical operations to \
numbers and you will get numbers back.\
\>", "Text",
 CellChangeTimes->{{3.5835082334192467`*^9, 3.583508347953382*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "^", "5"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.5835083528101873`*^9, 3.583508355450222*^9}},
 CellLabel->"In[192]:="],

Cell[BoxData["32"], "Output",
 CellChangeTimes->{3.583508356116025*^9, 3.584468216873089*^9, 
  3.584468486868025*^9, 3.584471862996945*^9},
 CellLabel->"Out[192]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Log2", "[", "32", "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.583508364232665*^9, 3.583508381706853*^9}},
 CellLabel->"In[193]:="],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.583508382450426*^9, 3.584468216919807*^9, 
  3.584468486906925*^9, 3.58447186303154*^9},
 CellLabel->"Out[193]="]
}, Open  ]],

Cell["\<\
If you define variables, they will evaluate to the value you assigned them.\
\>", "Text",
 CellChangeTimes->{{3.5835083888285217`*^9, 3.58350843528144*^9}, {
  3.583590383999617*^9, 3.583590384561213*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "=", "6"}]], "Input",
 CellChangeTimes->{{3.583508438580459*^9, 3.583508440219294*^9}},
 CellLabel->"In[4]:="],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{3.583508440882813*^9, 3.584468216964737*^9, 
  3.5844684869470577`*^9, 3.5844685225949907`*^9, 3.584471863064618*^9, 
  3.584641092431057*^9},
 CellLabel->"Out[4]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"2", "^", "x"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.5835084466845293`*^9, 3.583508453763467*^9}},
 CellLabel->"In[195]:="],

Cell[BoxData["64"], "Output",
 CellChangeTimes->{3.58350845480048*^9, 3.584468217014987*^9, 
  3.584468486993466*^9, 3.584471863118703*^9},
 CellLabel->"Out[195]="]
}, Open  ]],

Cell[TextData[{
 "However, one difference between the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernel and many other interpreters is that it doesn\[CloseCurlyQuote]t \
complain about undefined variables. It simply treats them as variables, like \
in math."
}], "Text",
 CellChangeTimes->{{3.583508468959424*^9, 3.5835085354417953`*^9}, {
  3.5844480018375072`*^9, 3.5844480019581327`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"x", "^", "y"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.583508539771308*^9, 3.583508542506757*^9}, {
  3.583508792614751*^9, 3.5835087958685093`*^9}},
 CellLabel->"In[196]:="],

Cell[BoxData[
 SuperscriptBox["6", "y"]], "Output",
 CellChangeTimes->{3.583508543155182*^9, 3.5835087977267237`*^9, 
  3.584468217065619*^9, 3.5844684870417633`*^9, 3.5844718631655483`*^9},
 CellLabel->"Out[196]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Expand", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"y", "+", "x"}], ")"}], "^", "2"}], "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.5835085980479813`*^9, 3.583508645684095*^9}},
 CellLabel->"In[197]:="],

Cell[BoxData[
 RowBox[{"36", "+", 
  RowBox[{"12", " ", "y"}], "+", 
  SuperscriptBox["y", "2"]}]], "Output",
 CellChangeTimes->{3.583508646363521*^9, 3.584468217115576*^9, 
  3.58446848707512*^9, 3.584471863198642*^9},
 CellLabel->"Out[197]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"36", "+", 
     RowBox[{"12", " ", "y"}], "+", 
     SuperscriptBox["y", "2"]}], ")"}], " ", "/", " ", 
   RowBox[{"(", 
    RowBox[{"y", "+", "x"}], ")"}]}], "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.583508711107327*^9, 3.583508748883016*^9}},
 CellLabel->"In[198]:="],

Cell[BoxData[
 RowBox[{"6", "+", "y"}]], "Output",
 CellChangeTimes->{{3.583508719777014*^9, 3.5835087498363037`*^9}, 
   3.584468217164816*^9, 3.584468487110982*^9, 3.584471863254183*^9},
 CellLabel->"Out[198]="]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " doesn\[CloseCurlyQuote]t mind mixing defined and undefined variables. If \
they are defined they\[CloseCurlyQuote]re replaced by the assigned value and \
if not they\[CloseCurlyQuote]re not. This approach to undefined symbols hints \
at a deep conceptual difference between the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " kernel and many familiar evaluators -- it is often better to think of it \
as a simplifier than an evaluator. It has certain rules for what it considers \
a simpler form of an expression, and by defining a variable as a number you \
make it aware of a new way to simplify expressions -- by substituting a \
particular number for that variable.\n\nAnother odd thing is that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " doesn\[CloseCurlyQuote]t make as much of a deal about the difference \
between variables and functions as some languages do. You can define the \
value of a function on a particular input explicitly, as in: "
}], "Text",
 CellChangeTimes->{{3.5835088126746683`*^9, 3.583509199058846*^9}, {
  3.5844480139276543`*^9, 3.58444802830021*^9}, {3.584468419069387*^9, 
  3.584468423154972*^9}, {3.584468543054433*^9, 3.58446861001886*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"myFunction", "[", "17", "]"}], "=", "23"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.58350920059179*^9, 3.583509208650346*^9}, {
  3.583509471311919*^9, 3.583509473814189*^9}},
 CellLabel->"In[199]:="],

Cell[BoxData["23"], "Output",
 CellChangeTimes->{3.583509210938654*^9, 3.584468217276999*^9, 
  3.5844684871591873`*^9, 3.584471863285491*^9},
 CellLabel->"Out[199]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"myFunction", "[", "x", "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", "15", ",", " ", "19"}], "}"}]}], "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.583509221507221*^9, 3.5835092490266314`*^9}},
 CellLabel->"In[200]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"myFunction", "[", "15", "]"}], ",", 
   RowBox[{"myFunction", "[", "16", "]"}], ",", "23", ",", 
   RowBox[{"myFunction", "[", "18", "]"}], ",", 
   RowBox[{"myFunction", "[", "19", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5835092498473186`*^9, 3.584468217319606*^9, 
  3.584468487209775*^9, 3.5844718633313427`*^9},
 CellLabel->"Out[200]="]
}, Open  ]],

Cell[TextData[{
 "Notice how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " used the rule you gave it to simplify the expression ",
 StyleBox["myFunction[17]",
  FontFamily->"Courier"],
 ", but that didn\[CloseCurlyQuote]t affect it\[CloseCurlyQuote]s take on ",
 StyleBox["myFunction[16]",
  FontFamily->"Courier"],
 ", which is not defined as anything other than itself. You could also \
define"
}], "Text",
 CellChangeTimes->{{3.583509260130624*^9, 3.583509319514641*^9}, {
  3.58350941738881*^9, 3.583509459809867*^9}, {3.583509533082829*^9, 
  3.583509540689211*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"myFunction", "[", "y", "]"}], "=", "79.4"}]], "Input",
 CellChangeTimes->{{3.5835095436776133`*^9, 3.583509560202991*^9}},
 CellLabel->"In[201]:="],

Cell[BoxData["79.4`"], "Output",
 CellChangeTimes->{3.583509560865616*^9, 3.5844682173655252`*^9, 
  3.584468487340105*^9, 3.584471863368729*^9},
 CellLabel->"Out[201]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"myFunction", "[", "x", "]"}], ",", " ", 
   RowBox[{"myFunction", "[", "y", "]"}], ",", " ", 
   RowBox[{"myFunction", "[", "z", "]"}]}], "}"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.5835096753625937`*^9, 3.583509699443612*^9}},
 CellLabel->"In[202]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"myFunction", "[", "6", "]"}], ",", "79.4`", ",", 
   RowBox[{"myFunction", "[", "z", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5835097014322557`*^9, 3.584468217413992*^9, 
  3.584468487397451*^9, 3.584471863416483*^9},
 CellLabel->"Out[202]="]
}, Open  ]],

Cell[TextData[{
 "OK, that was cute, but how do I define a ",
 StyleBox["real",
  FontSlant->"Italic"],
 " function, like in Java? Funny you should ask....I was just getting to \
that. There are two things you need to do differently. First, when you \
specify the formal parameters (i.e. arguments) to the function, you have to \
put an underscore after each one. "
}], "Text",
 CellChangeTimes->{
  3.58350953536401*^9, {3.583509723909738*^9, 3.5835097500901327`*^9}, {
   3.583509796217868*^9, 3.5835098575216017`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"myOtherFunction", "[", "x_", "]"}], "=", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 CellChangeTimes->{{3.583509879704331*^9, 3.58350990447484*^9}, {
  3.58446874666223*^9, 3.58446875966263*^9}},
 CellLabel->"In[203]:="],

Cell[BoxData["36"], "Output",
 CellChangeTimes->{3.5835099095098257`*^9, 3.584468217451441*^9, 
  3.584468487440591*^9, 3.5844687604181213`*^9, 3.5844718635293007`*^9},
 CellLabel->"Out[203]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myOtherFunction", "[", "9", "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.583509914045062*^9, 3.583509927522378*^9}},
 CellLabel->"In[204]:="],

Cell[BoxData["36"], "Output",
 CellChangeTimes->{3.5835099283135767`*^9, 3.584468217499113*^9, 
  3.584468487477027*^9, 3.584468766052043*^9, 3.5844718635880423`*^9},
 CellLabel->"Out[204]="]
}, Open  ]],

Cell[TextData[{
 "That didn\[CloseCurlyQuote]t seem to work. We wanted the ",
 StyleBox["x",
  FontFamily->"Courier"],
 " to the right of the equals to be replaced by whatever argument is provided \
when the function is called. Instead, this just evaluated x^2 immediately \
when the function was defined, which yields 36 (we defined x to be 6 \
earlier). Thus, we defined a function of one argument that returns 36 \
regardless of the argument we supply when we call the function.  We don\
\[CloseCurlyQuote]t want the ",
 "kernel",
 " to evaluate the right hand when we define the function, we want it to do \
so after the parameter ",
 StyleBox["x_ ",
  FontFamily->"Courier"],
 "has been bound to whatever value we supply when we call the function. To \
get that behavior, we have to use ",
 StyleBox[":=",
  FontFamily->"Courier"],
 " instead of ",
 StyleBox["=",
  FontFamily->"Courier"],
 ", telling the kernel to delay evaluation of the right hand side until the \
parameters are bound.",
 StyleBox[" ",
  FontFamily->"Courier"]
}], "Text",
 CellChangeTimes->{{3.583509962683702*^9, 3.5835102162013903`*^9}, {
   3.583510265379957*^9, 3.583510344193399*^9}, {3.583510845439282*^9, 
   3.583510850029949*^9}, {3.5844481853982687`*^9, 3.5844481980706997`*^9}, {
   3.584468790846661*^9, 3.5844689700978622`*^9}, {3.584640138410571*^9, 
   3.584640205894719*^9}, 3.584993384473658*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"myOtherFunction", "[", "x_", "]"}], ":=", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 CellChangeTimes->{
  3.583510434349318*^9, {3.584469003347353*^9, 3.584469006302886*^9}},
 CellLabel->"In[205]:="],

Cell[TextData[{
 StyleBox["Notice two differences from when we tried defining it with ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["=",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[". First, the ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["x",
  FontFamily->"Courier",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" on the right hand side is now colored green, indicating a formal \
parameter. Second, no value is returned from a delayed evaluation.",
  FontColor->RGBColor[0., 0., 0.]]
}], "Text",
 CellChangeTimes->{{3.583510567553496*^9, 3.583510573457621*^9}, {
   3.583510650578022*^9, 3.583510764625504*^9}, {3.5835108149425*^9, 
   3.58351082859461*^9}, {3.583590562376876*^9, 3.583590564618589*^9}, {
   3.584131298122114*^9, 3.5841313197674522`*^9}, 3.584131410378069*^9, {
   3.584131465886734*^9, 3.584131502377898*^9}, {3.584131546894009*^9, 
   3.5841315502273827`*^9}, {3.584131615536457*^9, 3.584131643311674*^9}, {
   3.5841316740526943`*^9, 3.584131691111546*^9}, {3.584131723406474*^9, 
   3.584131730007091*^9}, 3.584448203837764*^9, {3.5844687013527946`*^9, 
   3.58446870459618*^9}, {3.584469038637806*^9, 3.5844690397720613`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myOtherFunction", "[", "9", "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.584469052112502*^9, 3.584469055766549*^9}},
 CellLabel->"In[206]:="],

Cell[BoxData["81"], "Output",
 CellChangeTimes->{
  3.583510456869594*^9, 3.5844682175985193`*^9, 3.584468487594791*^9, {
   3.58446905681682*^9, 3.584469063537266*^9}, 3.5844718636416073`*^9},
 CellLabel->"Out[206]="]
}, Open  ]],

Cell["\<\
This is what we wanted. Most of the time you will want to use formal \
parameters and delayed evaluation, but there are a couple of circumstances in \
which you may want to define an expression directly using =. One is in \
defining the base case of a recursive function definition.\
\>", "Text",
 CellChangeTimes->{{3.5835104896269827`*^9, 3.583510545465939*^9}, {
   3.583510872438327*^9, 3.5835109644295692`*^9}, {3.583511001982275*^9, 
   3.5835110622974997`*^9}, 3.584202692918491*^9, {3.584202725644682*^9, 
   3.584202937971849*^9}, 3.584448214517316*^9, {3.584453612487609*^9, 
   3.584453612654776*^9}, {3.5844690748757687`*^9, 3.58446909914001*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"mySquare", "[", "1", "]"}], "=", "1"}]], "Input",
 CellChangeTimes->{{3.5835110729864187`*^9, 3.583511085611495*^9}},
 CellLabel->"In[207]:="],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.583511087376544*^9, 3.584468217664747*^9, 
  3.584468487658366*^9, 3.584471863682591*^9},
 CellLabel->"Out[207]="]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"mySquare", "[", "n_", "]"}], ":=", 
  RowBox[{
   RowBox[{"mySquare", "[", 
    RowBox[{"n", "-", "1"}], "]"}], "+", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"2", "n"}], "-", "1"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.5835110887569447`*^9, 3.583511145964198*^9}, {
  3.583511177699955*^9, 3.583511187899934*^9}, {3.5835112430676928`*^9, 
  3.583511245234467*^9}},
 CellLabel->"In[208]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"mySquare", "[", "z", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"z", ",", "10"}], "}"}]}], "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.583511251301856*^9, 3.583511279707485*^9}},
 CellLabel->"In[209]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", "49", ",", 
   "64", ",", "81", ",", "100"}], "}"}]], "Output",
 CellChangeTimes->{3.583511280718975*^9, 3.584468217715712*^9, 
  3.584468487709298*^9, 3.5844718637352657`*^9},
 CellLabel->"Out[209]="]
}, Open  ]],

Cell["\<\
You can also use immediate definitions of expressions as a way to store \
information indexed by various other expressions.\
\>", "Text",
 CellChangeTimes->{{3.5835113404838676`*^9, 3.583511391385605*^9}, 
   3.583511656690597*^9, {3.583590645904072*^9, 3.5835906505383244`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"speciesName", "[", "\"\<yeast\>\"", "]"}], "=", 
  "\"\<Saccharomyces cerevisiae\>\""}]], "Input",
 CellChangeTimes->{{3.5835113982098618`*^9, 3.583511446795787*^9}},
 CellLabel->"In[210]:="],

Cell[BoxData["\<\"Saccharomyces cerevisiae\"\>"], "Output",
 CellChangeTimes->{3.583511447891468*^9, 3.584468217748356*^9, 
  3.584468487741461*^9, 3.5844718637655487`*^9},
 CellLabel->"Out[210]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"speciesName", "[", "\"\<fruit fly\>\"", "]"}], "=", 
  "\"\<Drosophila melanogaster\>\""}]], "Input",
 CellChangeTimes->{{3.58351144927276*^9, 3.583511474330885*^9}},
 CellLabel->"In[211]:="],

Cell[BoxData["\<\"Drosophila melanogaster\"\>"], "Output",
 CellChangeTimes->{3.583511476649239*^9, 3.584468217781034*^9, 
  3.584468487774376*^9, 3.584471863799321*^9},
 CellLabel->"Out[211]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"speciesName", "[", "\"\<yeast\>\"", "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.583511482760948*^9, 3.5835114950748653`*^9}},
 CellLabel->"In[212]:="],

Cell[BoxData["\<\"Saccharomyces cerevisiae\"\>"], "Output",
 CellChangeTimes->{3.583511495935841*^9, 3.5844682178192987`*^9, 
  3.584468487810459*^9, 3.584471863835884*^9},
 CellLabel->"Out[212]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"speciesName", "[", "\"\<rhino\>\"", "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.583511497647812*^9, 3.583511508188044*^9}},
 CellLabel->"In[213]:="],

Cell[BoxData[
 RowBox[{"speciesName", "[", "\<\"rhino\"\>", "]"}]], "Output",
 CellChangeTimes->{3.583511508969298*^9, 3.584468217866213*^9, 
  3.584468487860559*^9, 3.584471863884166*^9},
 CellLabel->"Out[213]="]
}, Open  ]],

Cell["\<\
Well, it\[CloseCurlyQuote]s not omniscient. Those were character strings \
(since they were enclosed in parentheses) but you can do the same trick with \
symbols:\
\>", "Text",
 CellChangeTimes->{{3.5835115124109573`*^9, 3.583511596233674*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"speciesName", "[", "yeast", "]"}], "=", 
  "\"\<Saccharomyces cerevisiae\>\""}]], "Input",
 CellChangeTimes->{{3.5835115690984507`*^9, 3.583511638442812*^9}},
 CellLabel->"In[214]:="],

Cell[BoxData["\<\"Saccharomyces cerevisiae\"\>"], "Output",
 CellChangeTimes->{{3.583511628995734*^9, 3.583511639801591*^9}, 
   3.584468217917467*^9, 3.584468487947823*^9, 3.584471863933567*^9},
 CellLabel->"Out[214]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"speciesName", "[", "yeast", "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.583511679073139*^9, 3.5835116844618196`*^9}, 
   3.584640405199538*^9},
 CellLabel->"In[215]:="],

Cell[BoxData["\<\"Saccharomyces cerevisiae\"\>"], "Output",
 CellChangeTimes->{3.583511685559904*^9, 3.584468217966407*^9, 
  3.584468488049464*^9, 3.584471863971635*^9},
 CellLabel->"Out[215]="]
}, Open  ]],

Cell[TextData[{
 "yeast is still an undefined symbol, but ",
 Cell[BoxData[
  RowBox[{"speciesName", "[", "yeast", "]"}]], "Input",
  CellChangeTimes->{{3.583511679073139*^9, 3.5835116844618196`*^9}}],
 "has been defined to be a particular string. You can do the same thing with \
numbers, as we showed above:"
}], "Text",
 CellChangeTimes->{{3.583511699172575*^9, 3.5835117572022142`*^9}, {
  3.5844692426659813`*^9, 3.584469243188025*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"numberSpelling", "[", "8", "]"}], "=", "\"\<eight\>\""}]], "Input",\

 CellChangeTimes->{{3.583511780399848*^9, 3.583511817946884*^9}},
 CellLabel->"In[216]:="],

Cell[BoxData["\<\"eight\"\>"], "Output",
 CellChangeTimes->{3.583511819171896*^9, 3.5844682180215693`*^9, 
  3.58446848812512*^9, 3.584471864003501*^9},
 CellLabel->"Out[216]="]
}, Open  ]],

Cell["\<\
Do not confuse this expression with a reference to a part of an array or \
list. I could define a list like this:\
\>", "Text",
 CellChangeTimes->{{3.583511827828168*^9, 3.583511898169674*^9}, {
  3.583512671702874*^9, 3.583512671799314*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberSpellingList", "=", 
  RowBox[{"{", 
   RowBox[{
   "\"\<one\>\"", ",", " ", "\"\<two\>\"", ",", " ", "\"\<three\>\""}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.5835119000252943`*^9, 3.583511921588409*^9}},
 CellLabel->"In[217]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"one\"\>", ",", "\<\"two\"\>", ",", "\<\"three\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.583511923695703*^9, 3.584468218064905*^9, 
  3.58446848815888*^9, 3.584471864049387*^9},
 CellLabel->"Out[217]="]
}, Open  ]],

Cell["\<\
but to reference the parts of that list I would use double square brackets, \
as in:\
\>", "Text",
 CellChangeTimes->{{3.583511927611332*^9, 3.583511940449725*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberSpellingList", "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.583511967953659*^9, 3.583511987807415*^9}},
 CellLabel->"In[218]:="],

Cell[BoxData["\<\"two\"\>"], "Output",
 CellChangeTimes->{3.583511988893773*^9, 3.584468218117011*^9, 
  3.584468488195623*^9, 3.584471864087225*^9},
 CellLabel->"Out[218]="]
}, Open  ]],

Cell[TextData[{
 StyleBox["(Note: ",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox[" list indexing starts at 1, not 0.)",
  FontColor->RGBColor[0., 0., 0.]],
 StyleBox["\n",
  FontColor->RGBColor[1., 0.2527656977187762, 1.]],
 "\nThings go all haywire if you try to use the single-brackets where you \
should use double or vice-versa:"
}], "Text",
 CellChangeTimes->{{3.5835120074120092`*^9, 3.583512063426181*^9}, {
   3.583512698058135*^9, 3.583512727802094*^9}, 3.583590722503429*^9, {
   3.584131904779606*^9, 3.584131916479569*^9}, {3.584131965032222*^9, 
   3.584132017584138*^9}, 3.584448217788957*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberSpellingList", "[", "2", "]"}]], "Input",
 CellChangeTimes->{{3.5835120826836452`*^9, 3.583512083747211*^9}},
 CellLabel->"In[219]:="],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"\<\"one\"\>", ",", "\<\"two\"\>", ",", "\<\"three\"\>"}], "}"}], 
  "[", "2", "]"}]], "Output",
 CellChangeTimes->{3.583512105170573*^9, 3.584468218165409*^9, 
  3.584468488243718*^9, 3.584471864117703*^9},
 CellLabel->"Out[219]="]
}, Open  ]],

Cell[TextData[{
 "Here, the kernel has substituted the definition of ",
 Cell[BoxData["numberSpellingList"], "Input",
  CellChangeTimes->{{3.5835120826836452`*^9, 3.583512083747211*^9}}],
 " because that is the only way to simplify the input expression -- \
interpreting it as a call to an undefined function would not be useful. \
Likewise, we cannot use the double brackets for arguments to a function:"
}], "Text",
 CellChangeTimes->{{3.583512108275145*^9, 3.58351213052148*^9}, {
   3.583512167639935*^9, 3.583512244729785*^9}, {3.583512765037084*^9, 
   3.583512767362131*^9}, 3.584448218933291*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"numberSpelling", "[", 
   RowBox[{"[", "8", "]"}], "]"}], " "}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.583512250020151*^9, 3.583512256337138*^9}, {
  3.584132916424819*^9, 3.584132917696209*^9}},
 CellLabel->"In[220]:="],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Part", "::", "partd"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Part specification \[NoBreak]\\!\\(numberSpelling \
\[LeftDoubleBracket] 8 \[RightDoubleBracket]\\)\[NoBreak] is longer than \
depth of object. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", ButtonStyle->\\\
\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/partd\\\", ButtonNote -> \
\\\"Part::partd\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.583512256928131*^9, 3.584468218242375*^9, 
  3.5844684884841757`*^9, 3.584471864172104*^9},
 CellLabel->"During evaluation of In[220]:="],

Cell[BoxData[
 RowBox[{"numberSpelling", "\[LeftDoubleBracket]", "8", 
  "\[RightDoubleBracket]"}]], "Output",
 CellChangeTimes->{3.583512256934314*^9, 3.584468218250079*^9, 
  3.584468488486408*^9, 3.5844718641743307`*^9},
 CellLabel->"Out[220]="]
}, Open  ]],

Cell[TextData[{
 StyleBox["This gave an error message, since ",
  FontColor->RGBColor[0., 0., 0.]],
 Cell[BoxData[
  RowBox[{
   StyleBox["numberSpelling",
    FontFamily->"Courier",
    FontSize->13], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["is",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["not",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["a",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["list",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["and",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["does",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["not",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["have",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["an",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox["eighth",
    FontSize->14], 
   StyleBox[" ",
    FontSize->14], 
   StyleBox[
    RowBox[{"part", "."}],
    FontSize->14]}]], "Input",
  CellChangeTimes->{{3.583512250020151*^9, 3.583512256337138*^9}},
  FontFamily->"Arial",
  FontWeight->"Plain"],
 " Since it couldn\[CloseCurlyQuote]t simplify the input, it just returned \
the input itself. Note that the output format looks slightly different than \
the input format, but that\[CloseCurlyQuote]s eye candy created by the \
notebook front end. This kind of eye candy is ignored by the kernel -- it \
will treat either form as a representation of the same expression."
}], "Text",
 CellChangeTimes->{{3.58351226002746*^9, 3.583512354850328*^9}, {
   3.5835127825071583`*^9, 3.583512902977577*^9}, {3.583513409377893*^9, 
   3.58351342773029*^9}, {3.5835907586338997`*^9, 3.58359075863402*^9}, 
   3.584132054439049*^9, {3.584132506978669*^9, 3.5841325577442617`*^9}, 
   3.584448220373301*^9, 3.584449560875083*^9, {3.584449645881546*^9, 
   3.58444964620308*^9}, {3.584453359434044*^9, 3.584453486192256*^9}, {
   3.5844693484607286`*^9, 3.584469351252852*^9}, {3.5846405329271097`*^9, 
   3.584640537302821*^9}, {3.609170321290954*^9, 3.6091703227933292`*^9}}],

Cell[CellGroupData[{

Cell["Function names", "Subsubsubsection",
 CellChangeTimes->{{3.584449599331242*^9, 3.584449602074819*^9}}],

Cell[TextData[{
 StyleBox["Function names must begin with a letter and can only contain \
letters and numbers.  Since all ",
  FontColor->GrayLevel[0]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" built-in functions start with a capital letter, it is a good idea \
to start your functions (and variables) with a lowercase letter. The style in \
",
  FontColor->GrayLevel[0]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" is to use full length English names for functions and variables \
because the result is more readable, even it requires more typing, and we \
strongly encourage you to follow this convention. When programming \
assignments are graded, there will be some points for style and legibility.",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.584132597653451*^9, 3.5841326054163733`*^9}, {
  3.5841326459891567`*^9, 3.584132693420079*^9}, {3.584132819938685*^9, 
  3.5841329501168327`*^9}, {3.5844695120944643`*^9, 3.584469610516405*^9}, {
  3.585046560344132*^9, 3.5850465683731127`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Clearing definitions from variables\
\>", "Subsubsubsection",
 CellChangeTimes->{{3.584449599331242*^9, 3.584449602074819*^9}, {
  3.584469745126934*^9, 3.584469750291287*^9}}],

Cell[TextData[{
 "To clear the definition of a specific variable, use ",
 StyleBox["Clear",
  FontFamily->"Courier"],
 ":"
}], "Text",
 CellChangeTimes->{{3.584451578045514*^9, 3.584451580502894*^9}, {
  3.584451612381757*^9, 3.584451640509193*^9}, {3.584451729171104*^9, 
  3.584451730740394*^9}, {3.584451852715582*^9, 3.58445188877181*^9}, {
  3.584469648141492*^9, 3.584469650683958*^9}},
 FontColor->GrayLevel[0]],

Cell[BoxData[
 RowBox[{"Clear", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.584451645614085*^9, 3.584451649038361*^9}, {
  3.584451689016548*^9, 3.584451689661124*^9}},
 FontColor->GrayLevel[0],
 CellLabel->"In[221]:="],

Cell[TextData[{
 StyleBox["x",
  FontFamily->"Courier"],
 " is now undefined. You can clear function definitions the same way.  To \
clear all variables, type:"
}], "Text",
 CellChangeTimes->{{3.58445171515657*^9, 3.5844517436513643`*^9}, {
  3.584451801868353*^9, 3.5844518321093187`*^9}, {3.584451910739167*^9, 
  3.584451977817911*^9}, {3.5844696540442963`*^9, 3.584469657924156*^9}},
 FontColor->GrayLevel[0]],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.584451807214631*^9, 3.58445182186653*^9}},
 FontColor->GrayLevel[0],
 CellLabel->"In[84]:="]
}, Open  ]],

Cell[CellGroupData[{

Cell["Incorporated reading", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.58351378178043*^9, 
  3.583513789745801*^9}}],

Cell["\<\
Read the documentation page tutorial/DefiningFunctions. \
\>", "Text",
 CellChangeTimes->{{3.583516895083177*^9, 3.583516912010635*^9}, {
  3.5841322790941763`*^9, 3.584132281197949*^9}, {3.585046610176527*^9, 
  3.585046612036508*^9}},
 FontColor->GrayLevel[0]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Practice: Defining functions with formal parameters and delayed evaluation\
\>", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}}],

Cell[TextData[{
 "Define a function that takes in a single argument ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 " and returns an ",
 Cell[BoxData[
  FormBox[
   RowBox[{"n", "\[Cross]", "n"}], TraditionalForm]]],
 " square matrix containing random integers between 1 and ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]]],
 ". Demonstrate that it works by calling it on 5."
}], "ItemNumbered",
 CellChangeTimes->{{3.583512463914525*^9, 3.583512590145523*^9}, {
  3.583512932509253*^9, 3.5835130247213907`*^9}, {3.585046689992331*^9, 
  3.585046690588716*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"NxN", "[", "n_", "]"}], ":=", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"RandomSample", "[", 
      RowBox[{
       RowBox[{"Range", "[", 
        RowBox[{"1", ",", "n"}], "]"}], ",", "n"}], "]"}], ",", 
     RowBox[{"{", "n", "}"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.609170340800035*^9, 3.609170413166852*^9}, {
  3.609171457745969*^9, 3.609171458791815*^9}},
 CellLabel->"In[82]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NxN", "[", "5", "]"}]], "Input",
 CellChangeTimes->{{3.609170415088089*^9, 3.60917041683505*^9}},
 CellLabel->"In[83]:="],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"5", "1", "4", "2", "3"},
     {"3", "4", "2", "5", "1"},
     {"2", "3", "5", "4", "1"},
     {"3", "1", "4", "5", "2"},
     {"1", "5", "2", "3", "4"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.609170417980253*^9, 3.6091714696040497`*^9},
 CellLabel->"Out[83]//MatrixForm="]
}, Open  ]],

Cell["\<\
Define a function that takes in two arguments and returns a list consisting \
of their difference, product, and ratio, in that order. You can construct a \
list explicitly by just putting curly brackets around some expressions in \
your code. Demonstrate that it works by calling it on 5 and 10.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.583512463914525*^9, 3.583512590145523*^9}, {
  3.583512932509253*^9, 3.5835130628895617`*^9}, {3.583513112769485*^9, 
  3.583513170969942*^9}, {3.583590840919817*^9, 3.583590963314618*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"myFunc", "[", 
   RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Abs", "[", 
     RowBox[{"a", "-", "b"}], "]"}], ",", 
    RowBox[{"a", "*", "b"}], ",", 
    FractionBox["a", "b"]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.6091704288674393`*^9, 3.609170522637662*^9}, {
  3.609171463729615*^9, 3.6091714643870373`*^9}},
 CellLabel->"In[80]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myFunc", "[", 
  RowBox[{"5", ",", "10"}], "]"}]], "Input",
 CellChangeTimes->{{3.609170482818529*^9, 3.6091704898034782`*^9}},
 CellLabel->"In[81]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "50", ",", 
   FractionBox["1", "2"]}], "}"}]], "Output",
 CellChangeTimes->{{3.6091704905400953`*^9, 3.6091705248993607`*^9}, 
   3.609171466488764*^9},
 CellLabel->"Out[81]="]
}, Open  ]],

Cell["\[FilledSquare]", "Text",
 CellChangeTimes->{{3.5835148587242947`*^9, 3.583514858727017*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notebooks and kernels", "Subsection",
 CellChangeTimes->{{3.584640965842999*^9, 3.5846409716782827`*^9}, 
   3.584993390458672*^9}],

Cell["\<\
You can have more than one notebook open at once. By default, each notebook \
interacts with the same kernel. Since the kernel keeps track of values \
assigned to variables and expressions, definitions made in any notebook \
appear as though they were made in all notebooks. If you define x=1 in one \
notebook, then define x=2 in a second notebook, then go back to the first \
notebook, you\[CloseCurlyQuote]ll find that the value of x is now 2. 

The default is that all notebooks are connected to the same kernel, but you \
can also run more than one kernel (typically up to 4). The menu sequence \
Evaluation -> kernel Configuration Options will pop up a window that allows \
you to add new kernel configurations with names. Once you\[CloseCurlyQuote]ve \
configured a second kernel it will show up as a choice when you use the menu \
sequence Evaluation -> Notebook\[CloseCurlyQuote]s Kernel. This is useful \
mainly if you have a long running computation in one kernel and you want to \
simultaneously do some interactive, lightweight computation in another. Each \
kernel will only evaluate one input at a time.\
\>", "Text",
 CellChangeTimes->{{3.5846409795267057`*^9, 3.584641038286228*^9}, {
  3.5846411161829033`*^9, 3.584641225222479*^9}, {3.58464126124467*^9, 
  3.584641315262252*^9}, {3.5846416817630177`*^9, 3.5846417611496696`*^9}, {
  3.5846418632564087`*^9, 3.584641959678213*^9}, {3.584993392157309*^9, 
  3.584993407697976*^9}, {3.585047118929764*^9, 3.585047202868911*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Comments", "Subsection",
 CellChangeTimes->{{3.584450087344184*^9, 3.5844500884226227`*^9}}],

Cell["\<\
You can add comments to a notebooks in text cells or input cells.  To add a \
comment in an input cell, enclose the comment in (* and *).  The comment can \
be inserted anywhere in the expression.  For example\
\>", "Text",
 CellChangeTimes->{{3.584450161231085*^9, 3.584450425612118*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"a", ">", "b"}], ",", " ", 
   RowBox[{"(*", " ", "then", " ", "*)"}], " ", "p", ",", " ", 
   RowBox[{"(*", " ", "else", " ", "*)"}], " ", "q"}], "]"}]], "Input",
 CellChangeTimes->{{3.584450432643641*^9, 3.5844504924388847`*^9}, {
  3.5844505371842747`*^9, 3.584450558669944*^9}},
 CellLabel->"In[223]:="],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"a", ">", "b"}], ",", "p", ",", "q"}], "]"}]], "Output",
 CellChangeTimes->{{3.584450474805058*^9, 3.584450495190956*^9}, {
   3.5844505386446247`*^9, 3.5844505545694103`*^9}, 3.5844506071461973`*^9, 
   3.584468218467187*^9, 3.58446848856178*^9, 3.584471864304592*^9},
 CellLabel->"Out[223]="]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Printing to the notebook", "Subsection",
 CellChangeTimes->{{3.583508007226316*^9, 3.583508008965015*^9}, {
  3.583513275229184*^9, 3.583513288921771*^9}}],

Cell[TextData[{
 StyleBox["There are many ways to print and to create formatted output. The \
most basic is the built-in function ",
  FontColor->GrayLevel[0]],
 StyleBox["Print.",
  FontFamily->"Courier",
  FontWeight->"Bold",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.583513325210005*^9, 3.5835133416151237`*^9}, {
   3.583513376257972*^9, 3.583513382754396*^9}, {3.5835141393163157`*^9, 
   3.5835141849955053`*^9}, 3.583590981278207*^9, 3.609170538153782*^9}],

Cell[CellGroupData[{

Cell["Incorporated reading", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.58351378178043*^9, 
  3.583513789745801*^9}}],

Cell[TextData[{
 "Read the reference documentation page on ",
 StyleBox["Print",
  FontFamily->"Courier"],
 ". This is a relatively brief and simple page with just 13 examples. Read \
all of them. At the end, you\[CloseCurlyQuote]ll find that you have learned \
about some new kinds of things ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can do, such as create graphics from expressions, even though you won\
\[CloseCurlyQuote]t actually know how to do or use these things yourself yet. \
It\[CloseCurlyQuote]s important to develop a set of terms and concepts that \
you don\[CloseCurlyQuote]t fully understand. That way, \
you\[CloseCurlyQuote]ll know what to look up when you\[CloseCurlyQuote]re \
searching for a way to do something. For example, you\[CloseCurlyQuote]ll \
know that there\[CloseCurlyQuote]s a powerful built-in function called ",
 StyleBox["Graphics",
  FontFamily->"Courier"],
 " that you can look up if you want to write code that generates vector \
graphics and that there\[CloseCurlyQuote]s a function called ",
 StyleBox["Column",
  FontFamily->"Courier"],
 " that prints things in columns. "
}], "Text",
 CellChangeTimes->{{3.583513794570169*^9, 3.583513795964725*^9}, {
  3.583514188785845*^9, 3.583514441946226*^9}, {3.583591022447954*^9, 
  3.5835910283336983`*^9}, {3.584469978373869*^9, 3.584469988452393*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Practice: Printing", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.583514468298832*^9, 
  3.583514469463975*^9}}],

Cell[TextData[{
 "Yes, it had to come sometime. You knew you couldn\[CloseCurlyQuote]t \
escape. So here it is. Write a function called ",
 StyleBox["hello",
  FontFamily->"Courier"],
 " that takes no arguments and, when called, prints \
\[OpenCurlyDoubleQuote]Hello, World.\[CloseCurlyDoubleQuote] Demonstrate that \
it works."
}], "ItemNumbered",
 CellChangeTimes->{{3.583514476426425*^9, 3.583514749314197*^9}, {
  3.583514798729973*^9, 3.5835148328018427`*^9}, {3.5835148917642803`*^9, 
  3.5835148917693033`*^9}, {3.60917055836207*^9, 3.609170563121388*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"helloWorld", "[", "]"}], ":=", 
  RowBox[{
  "Print", "[", "\"\<Hello, World.\>\"", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"helloWorld", "[", "]"}]}], "Input",
 CellChangeTimes->{{3.609170564621195*^9, 3.609170571532633*^9}, {
   3.60917063670897*^9, 3.609170638828978*^9}, 3.609170831827941*^9},
 CellLabel->"In[52]:="],

Cell[BoxData["\<\"Hello, World.\"\>"], "Print",
 CellChangeTimes->{3.609170571951807*^9, 3.609170639728302*^9, 
  3.6091708382246847`*^9},
 CellLabel->"During evaluation of In[52]:="]
}, Open  ]],

Cell[TextData[{
 "Now write a function called ",
 StyleBox["helloWorld",
  FontFamily->"Courier"],
 " that takes in one argument and behaves like this:"
}], "ItemNumbered",
 CellChangeTimes->{{3.583514476426425*^9, 3.583514749314197*^9}, {
  3.583514798729973*^9, 3.5835148328018427`*^9}, {3.5835148917642803`*^9, 
  3.5835149224577503`*^9}, {3.585047307232275*^9, 3.585047307420548*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"helloWorld", "[", "7", "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.583514981384881*^9, 3.583514993450548*^9}, {
  3.584471791807515*^9, 3.584471797166753*^9}, {3.58447185255445*^9, 
  3.5844718532964277`*^9}},
 CellLabel->"In[186]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Hello, World \"\>", "\[InvisibleSpace]", "7", 
   "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm["Hello, World ", 7, "."],
  Editable->False]], "Print",
 Deployed->True,
 CellChangeTimes->{3.584471650014612*^9},
 CellLabel->"During evaluation of In[186]:="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"helloWorld", "[", "9", "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.5835150288763123`*^9, 3.5835150292353153`*^9}},
 CellLabel->"In[184]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Hello, World \"\>", "\[InvisibleSpace]", "9", 
   "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm["Hello, World ", 9, "."],
  Editable->False]], "Print",
 CellChangeTimes->{3.5844715662134943`*^9},
 CellLabel->"During evaluation of In[184]:="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"helloWorld", "[", "\"\<Nine\>\"", "]"}]], "Input",
 Evaluatable->False,
 CellChangeTimes->{{3.58351503714743*^9, 3.5835150402907543`*^9}},
 CellLabel->"In[185]:="],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Hello, World \"\>", "\[InvisibleSpace]", "\<\"Nine\"\>", 
   "\[InvisibleSpace]", "\<\".\"\>"}],
  SequenceForm["Hello, World ", "Nine", "."],
  Editable->False]], "Print",
 CellChangeTimes->{3.584471568311818*^9},
 CellLabel->"During evaluation of In[185]:="]
}, Open  ]],

Cell["\<\
It should behave this way for any numeric or string argument. Pay attention \
to getting all the details of spacing and punctuation right.\
\>", "Text",
 CellChangeTimes->{{3.609171368174918*^9, 3.609171371342865*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"helloWorld", "[", "n_", "]"}], ":=", 
  RowBox[{"Print", "[", 
   RowBox[{"\"\<Hello, World \>\"", "<>", 
    RowBox[{"ToString", "[", "n", "]"}], "<>", "\"\<.\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6091705858403807`*^9, 3.609170666956501*^9}, {
  3.609170717877537*^9, 3.6091707366046133`*^9}, {3.609170770180614*^9, 
  3.609170775077198*^9}, {3.6091713951382*^9, 3.60917139597847*^9}},
 CellLabel->"In[78]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"helloWorld", "[", "7", "]"}]], "Input",
 CellLabel->"In[79]:="],

Cell[BoxData["\<\"Hello, World 7.\"\>"], "Print",
 CellChangeTimes->{3.609171402859475*^9},
 CellLabel->"During evaluation of In[79]:="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"helloWorld", "[", "9", "]"}]], "Input",
 CellChangeTimes->{{3.6091713772573137`*^9, 3.609171381448834*^9}},
 CellLabel->"In[77]:="],

Cell[BoxData["\<\"Hello, World 9.\"\>"], "Print",
 CellChangeTimes->{3.609171382579267*^9},
 CellLabel->"During evaluation of In[77]:="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"helloWorld", "[", "\"\<Nine\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.609170787564053*^9, 3.609170795034398*^9}},
 CellLabel->"In[47]:="],

Cell[BoxData["\<\"Hello, World Nine.\"\>"], "Print",
 CellChangeTimes->{3.609170795533568*^9},
 CellLabel->"During evaluation of In[47]:="]
}, Open  ]],

Cell["\[FilledSquare]", "Text",
 CellChangeTimes->{{3.583515052243328*^9, 3.5835150800980663`*^9}, {
  3.5835180226909637`*^9, 3.583518027220049*^9}, {3.60917134693472*^9, 
  3.609171362662417*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Repeating operations (a.k.a. looping, iterating)", "Subsection",
 CellChangeTimes->{{3.583508056911644*^9, 3.583508078785828*^9}}],

Cell[TextData[{
 "You already learned one way to do the same thing multiple times using ",
 StyleBox["Table",
  FontFamily->"Courier"],
 ". However, you don\[CloseCurlyQuote]t always want the result of each \
iteration returned in a list. Sometimes you just want to compute temporary \
intermediate values and decide whether to return them in a list, print them \
out, or do something else, depending on what they are. For this you can use \
any of a variety of iteration constructs similar to those used in other \
programming languages, including ",
 StyleBox["Do",
  FontFamily->"Courier"],
 ", ",
 StyleBox["While",
  FontFamily->"Courier"],
 ", and, ",
 StyleBox["For",
  FontFamily->"Courier"],
 "."
}], "Text",
 CellChangeTimes->{{3.583515204714781*^9, 3.583515368962274*^9}, {
  3.583591110990778*^9, 3.583591112074485*^9}}],

Cell[CellGroupData[{

Cell["Incorporated reading", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.58351378178043*^9, 
  3.583513789745801*^9}}],

Cell[TextData[{
 "Read the documentation page tutorial/RepetitiveOperations ",
 StyleBox["(http://reference.wolfram.com/mathematica/tutorial/\
RepetitiveOperations.html). ",
  FontColor->GrayLevel[0]],
 "Then read the reference page on ",
 StyleBox["For",
  FontFamily->"Courier"],
 "."
}], "Text",
 CellChangeTimes->{{3.583516987105856*^9, 3.583516991677878*^9}, {
  3.5835174087365437`*^9, 3.583517422290324*^9}, {3.58351759611478*^9, 
  3.583517597810013*^9}, {3.584133557959552*^9, 3.584133559557939*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Practice: Looping constructs", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.583514468298832*^9, 
  3.583514469463975*^9}, {3.583517624331842*^9, 3.583517631065776*^9}}],

Cell[TextData[{
 "Write a function ",
 StyleBox["helloTimes[n_]",
  FontFamily->"Courier",
  FontSize->14],
 " that prints \[OpenCurlyDoubleQuote]Hello, World.\[CloseCurlyDoubleQuote] \
",
 StyleBox["n",
  FontFamily->"Courier",
  FontSize->14],
 " times. Demonstrate that it works by calling it on 9."
}], "Text",
 CellChangeTimes->{{3.583517679589593*^9, 3.583517796721043*^9}, {
  3.583519453604433*^9, 3.583519458657486*^9}, {3.584134177790297*^9, 
  3.5841342252613373`*^9}, {3.609170816344591*^9, 3.609170816840498*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"helloTimes", "[", "n_", "]"}], ":=", 
  RowBox[{"For", "[", 
   RowBox[{
    RowBox[{"i", "=", "1"}], ",", 
    RowBox[{"i", "\[LessEqual]", "n"}], ",", 
    RowBox[{"i", "++"}], ",", 
    RowBox[{"helloWorld", "[", "]"}]}], "]"}]}], "\n", 
 RowBox[{"helloTimes", "[", "9", "]"}]}], "Input",
 CellChangeTimes->{{3.6091708113524723`*^9, 3.609170811354096*^9}},
 CellLabel->"In[54]:="],

Cell[CellGroupData[{

Cell[BoxData["\<\"Hello, World.\"\>"], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.609170812484043*^9, 3.609170865205799*^9}},
 CellLabel->"During evaluation of In[54]:="],

Cell[BoxData["\<\"Hello, World.\"\>"], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.609170812484043*^9, 3.609170865204337*^9}},
 CellLabel->"During evaluation of In[54]:="],

Cell[BoxData["\<\"Hello, World.\"\>"], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.609170812484043*^9, 3.6091708652028627`*^9}},
 CellLabel->"During evaluation of In[54]:="],

Cell[BoxData["\<\"Hello, World.\"\>"], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.609170812484043*^9, 3.609170865201406*^9}},
 CellLabel->"During evaluation of In[54]:="],

Cell[BoxData["\<\"Hello, World.\"\>"], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.609170812484043*^9, 3.609170865199958*^9}},
 CellLabel->"During evaluation of In[54]:="],

Cell[BoxData["\<\"Hello, World.\"\>"], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.609170812484043*^9, 3.6091708651985283`*^9}},
 CellLabel->"During evaluation of In[54]:="],

Cell[BoxData["\<\"Hello, World.\"\>"], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.609170812484043*^9, 3.609170865197106*^9}},
 CellLabel->"During evaluation of In[54]:="],

Cell[BoxData["\<\"Hello, World.\"\>"], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.609170812484043*^9, 3.6091708651955*^9}},
 CellLabel->"During evaluation of In[54]:="],

Cell[BoxData["\<\"Hello, World.\"\>"], "Print",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.609170812484043*^9, 3.609170865162114*^9}},
 CellLabel->"During evaluation of In[54]:="]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 StyleBox["\[FilledSquare]",
  FontColor->GrayLevel[0]]], "Input",
 CellChangeTimes->{{3.609170819179071*^9, 3.609170819180419*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Local variables", "Subsection",
 CellChangeTimes->{{3.583508056911644*^9, 3.583508078785828*^9}, {
  3.583519318090605*^9, 3.583519326145769*^9}}],

Cell[TextData[{
 "Most of the time, when you define a function consisting of more than a few \
lines of code, you will want to define some temporary, local variables that \
you can use to store intermediate results. This is done with the built in \
function ",
 StyleBox["Module",
  FontFamily->"Courier"],
 ". As a rule of thumb, most functions definitions you write in a \
\[OpenCurlyDoubleQuote].m\[CloseCurlyDoubleQuote] file that are more than a \
few lines long will start with ",
 StyleBox["Module",
  FontFamily->"Courier"],
 ", so it\[CloseCurlyQuote]s important to master this construct."
}], "Text",
 CellChangeTimes->{{3.585047905191188*^9, 3.58504795943727*^9}, {
  3.585047991285988*^9, 3.5850480165814533`*^9}, {3.585048050068652*^9, 
  3.5850481057094603`*^9}}],

Cell[CellGroupData[{

Cell["Incorporated reading", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.58351378178043*^9, 
  3.583513789745801*^9}}],

Cell["\<\
Read the documentation page tutorial/ModulesAndLocalVariables through the \
section \[OpenCurlyDoubleQuote]Assigning initial values to local variables\
\[CloseCurlyDoubleQuote]. You can skip the last section, \
\[OpenCurlyDoubleQuote]Using local variables in definitions with conditions\
\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.583519365860116*^9, 3.5835193868511057`*^9}, {
  3.584134260939145*^9, 3.584134262364126*^9}, {3.584470420420929*^9, 
  3.584470421316113*^9}, {3.585047804119833*^9, 3.585047859485379*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Sequencing expressions", "Subsubsection",
 CellChangeTimes->{{3.5835964583747797`*^9, 3.5835964622584467`*^9}}],

Cell["\<\
When an expression is followed by a semicolon, it is evaluated, its return \
value is ignored, and the next expression is evaluated.\
\>", "Text",
 CellChangeTimes->{{3.5835964661959333`*^9, 3.58359650769718*^9}, 
   3.584450892250449*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"30", "!"}]], "Input",
 CellChangeTimes->{{3.583596510799624*^9, 3.583596521899374*^9}},
 CellLabel->"In[224]:="],

Cell[BoxData["265252859812191058636308480000000"], "Output",
 CellChangeTimes->{{3.583596514398869*^9, 3.5835965225665903`*^9}, 
   3.584468218645959*^9, 3.5844684888216047`*^9, 3.5844718644209747`*^9},
 CellLabel->"Out[224]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"300", "!"}], ";", " ", 
  RowBox[{
  "Print", "[", "\"\<That was too long to print!\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.583596525885705*^9, 3.583596542749804*^9}},
 CellLabel->"In[225]:="],

Cell[BoxData["\<\"That was too long to print!\"\>"], "Print",
 CellChangeTimes->{3.583596543621099*^9, 3.584468218685485*^9, 
  3.584468488856526*^9, 3.584471864467078*^9},
 CellLabel->"During evaluation of In[225]:="]
}, Open  ]],

Cell["\<\
Suppressing output is particularly useful when writing procedural style \
programs, where you want to take a sequence of steps with side effects, such \
as modifying the values of local variables, printing, etc., before finally \
returning a value.\
\>", "Text",
 CellChangeTimes->{{3.583596565715884*^9, 3.583596636074266*^9}, {
   3.584135197967331*^9, 3.584135223169643*^9}, 3.584470463628044*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"factorial", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", "=", "1"}], "}"}], ",", " ", 
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"x", "=", 
        RowBox[{"x", "*", "i"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "2", ",", "n"}], "}"}]}], "]"}], ";", " ", "x"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.5835966460466967`*^9, 3.5835966518772984`*^9}, {
  3.5835967983185463`*^9, 3.58359699142069*^9}, {3.5835971301905727`*^9, 
  3.5835971405180264`*^9}},
 CellLabel->"In[226]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"factorial", "[", "4", "]"}]], "Input",
 CellChangeTimes->{{3.583596916291975*^9, 3.5835969205800657`*^9}, {
  3.583597067788701*^9, 3.583597088698106*^9}, {3.583597160296145*^9, 
  3.5835971653791647`*^9}},
 CellLabel->"In[227]:="],

Cell[BoxData["24"], "Output",
 CellChangeTimes->{
  3.58359692138876*^9, {3.583596976891881*^9, 3.583596993440669*^9}, {
   3.583597060570142*^9, 3.583597089276355*^9}, {3.5835971460413303`*^9, 
   3.583597165844328*^9}, 3.5844682187478647`*^9, 3.584468488908573*^9, 
   3.5844718647001333`*^9},
 CellLabel->"Out[227]="]
}, Open  ]],

Cell[TextData[{
 "Note the semicolon after the ",
 StyleBox["Do",
  FontFamily->"Courier"],
 " expression -- we don\[CloseCurlyQuote]t care what\[CloseCurlyQuote]s \
returned by ",
 StyleBox["Do",
  FontFamily->"Courier"],
 ", but after it\[CloseCurlyQuote]s done modifying ",
 StyleBox["x",
  FontFamily->"Courier"],
 ", we want to return the value of ",
 StyleBox["x",
  FontFamily->"Courier"],
 "."
}], "Text",
 CellChangeTimes->{{3.583597184700677*^9, 3.583597239658106*^9}}],

Cell[CellGroupData[{

Cell["\<\
Practice: Local variables and sequencing expressions\
\>", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.583514468298832*^9, 
  3.583514469463975*^9}, {3.583517624331842*^9, 3.583517631065776*^9}, {
  3.583519420630145*^9, 3.583519422650053*^9}, {3.583596780716548*^9, 
  3.5835967844023867`*^9}}],

Cell[TextData[{
 "Write a function ",
 StyleBox["randomDNA[n_]",
  FontFamily->"Courier"],
 " that prints out a string of length ",
 StyleBox["n",
  FontFamily->"Courier"],
 " consisting of a random sequence of \[OpenCurlyDoubleQuote]A\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]G\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]T\
\[CloseCurlyDoubleQuote]. On the right hand side of your function definition, \
start with a ",
 StyleBox["Module",
  FontFamily->"Courier"],
 " that defines a local variable ",
 StyleBox["nucleotides",
  FontFamily->"Courier"],
 " whose value is the 4-element list of strings {\[OpenCurlyDoubleQuote]A\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]C\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]G\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]T\
\[CloseCurlyDoubleQuote]}. Also define a local variable ",
 StyleBox["output",
  FontFamily->"Courier"],
 " where you collect the string to output in the end. Use ",
 StyleBox["Do",
  FontFamily->"Courier"],
 " to make a loop that iterates ",
 StyleBox["n",
  FontFamily->"Courier"],
 " times and on each iteration picks a random integer between 1 and 4 (using ",
 StyleBox["RandomInteger",
  FontFamily->"Courier"],
 "), uses it to access the corresponding element of the nucleotide list \
(remember double square brackets for accessing), and adds that element on to \
the end of the output string (look up the reference documentation for ",
 StyleBox["StringJoin",
  FontFamily->"Courier"],
 " and optionally read tutorial/OperationsOnStrings). "
}], "Text",
 CellChangeTimes->{{3.583517679589593*^9, 3.5835177967167387`*^9}, {
   3.583517855353656*^9, 3.583518007882264*^9}, {3.583519558730073*^9, 
   3.583519649225787*^9}, {3.58358993213759*^9, 3.583590077850716*^9}, {
   3.583590121585725*^9, 3.583590192898291*^9}, {3.583590300107471*^9, 
   3.5835903324441433`*^9}, {3.5850044910540257`*^9, 3.585004493420622*^9}, 
   3.6091708874887238`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomDNA", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"nucleotides", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\<A\>\"", ",", "\"\<T\>\"", ",", "\"\<C\>\"", ",", "\"\<G\>\""}], 
        "}"}]}], ",", 
      RowBox[{"output", "=", "\"\<\>\""}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"output", "=", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"output", ",", 
          RowBox[{"nucleotides", "[", 
           RowBox[{"[", 
            RowBox[{"Random", "[", 
             RowBox[{"Integer", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "]"}]}], 
         "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "n"}], "}"}]}], "]"}], ";", "output"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.609170912693203*^9, 3.609170912694604*^9}},
 CellLabel->"In[57]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomDNA", "[", "130", "]"}]], "Input",
 CellChangeTimes->{{3.609170917981008*^9, 3.609170924690826*^9}},
 CellLabel->"In[58]:="],

Cell[BoxData["\<\"\
GACTACCCCTCTAAGAATCGTAACGGATGAGCATAACATATCCCGACGATGTGGTTTCCCGCCTGAGACGGTACTCAT\
GCCACGATAGCCCGGCCCCAGGGTCGCCAGCGCGGGAAGACCCGGGTATGGT\"\>"], "Output",
 CellChangeTimes->{{3.6091709259088717`*^9, 3.609170931180399*^9}},
 CellLabel->"Out[58]="]
}, Open  ]],

Cell["\[FilledSquare]", "Text",
 CellChangeTimes->{{3.6091708882104597`*^9, 3.609170895104768*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Mapping functions over lists and functional programming\
\>", "Subsection",
 CellChangeTimes->{{3.583508056911644*^9, 3.583508078785828*^9}, {
  3.585490178493557*^9, 3.585490186562994*^9}}],

Cell[TextData[{
 "Procedural programming is a style in which you do a lot of assigning values \
to variables and reading or modifying those values during a computation. You \
also tend to write explicit loops using constructs like ",
 StyleBox["Do",
  FontFamily->"Courier"],
 " or ",
 StyleBox["For",
  FontFamily->"Courier"],
 ". Functional programming is a style in which you tend to apply functions in \
a nested fashion, using the return value from one as the input to another \
without storing the return value in any named variable. Instead of making \
explicit loops, you tend to apply functions to all elements of a list or \
matrix. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " supports both procedural and functional programming and I tend to use a \
mix of the two. One fo the advantages of functional style is that it is often \
more compact and elegant, using fewer lines code than a procedural style \
program that accomplishes the same thing. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " provides many builtin functions for applying functions to all the elements \
of a list. The most basic is ",
 StyleBox["Map",
  FontFamily->"Courier"],
 ". A simple use would be as follows."
}], "Text",
 CellChangeTimes->{{3.585490217628696*^9, 3.585490347555243*^9}, {
  3.5854904030372868`*^9, 3.585490407939007*^9}, {3.585490439131268*^9, 
  3.585490573339354*^9}, {3.58549779496743*^9, 3.5854978182678623`*^9}, {
  3.5854978553411922`*^9, 3.585497975289422*^9}, {3.585498019892356*^9, 
  3.585498122042062*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myMatrix", "=", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "10"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"3", ",", " ", "4"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.585498145280555*^9, 3.585498219839137*^9}},
 CellLabel->"In[8]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "3", ",", "8", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1", ",", "9", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "8", ",", "5", ",", "8"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.58549820751812*^9, 3.585498221665909*^9}},
 CellLabel->"Out[8]="]
}, Open  ]],

Cell[TextData[{
 "Now suppose you want the total each sublist. In procedural style, you could \
define a variable with an empty list for the return results, then iterate \
through the outer list, the define a variable for the running total of the \
sublist, initialize it to zero, iterate through the sublist adding the \
current number to the total, etc. This can be done much more cleanly using ",
 StyleBox["Map",
  FontFamily->"Courier"],
 "."
}], "Text",
 CellChangeTimes->{{3.585498247304131*^9, 3.5854982643892517`*^9}, {
  3.585498301940701*^9, 3.5854984095640793`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Total", ",", " ", "myMatrix"}], "]"}]], "Input",
 CellChangeTimes->{{3.585498431214964*^9, 3.5854984417419033`*^9}},
 CellLabel->"In[9]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"23", ",", "23", ",", "29"}], "}"}]], "Output",
 CellChangeTimes->{3.585498443028948*^9},
 CellLabel->"Out[9]="]
}, Open  ]],

Cell[TextData[{
 "This applied ",
 StyleBox["Total",
  FontFamily->"Courier"],
 " to every element of the top level list and returned the list of results. \
In principle, this can also be faster, because each totaling is independent \
of the others so they can be done in parallel. Whether it\[CloseCurlyQuote]s \
actually faster or not depends on the implementation, but \
it\[CloseCurlyQuote]s certainly neater."
}], "Text",
 CellChangeTimes->{{3.585498457388484*^9, 3.585498574385909*^9}}],

Cell[TextData[{
 "Now suppose you want a list containing the total of each sublist if it\
\[CloseCurlyQuote]s over 25, but 0 if it\[CloseCurlyQuote]s not. You\
\[CloseCurlyQuote]re going to have to define a temporary function that exists \
just long enough to apply it to every element of the list ",
 StyleBox["myMatrix",
  FontFamily->"Courier"],
 ". Here\[CloseCurlyQuote]s how you do that:"
}], "Text",
 CellChangeTimes->{{3.585498598940082*^9, 3.585498701325737*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Total", "[", "#", "]"}], " ", ">", " ", "25"}], ",", " ", 
      RowBox[{"Total", "[", "#", "]"}], ",", " ", "0"}], "]"}], " ", "&"}], 
   ",", " ", "myMatrix"}], "]"}]], "Input",
 CellChangeTimes->{{3.585498706255266*^9, 3.585498708756503*^9}, {
  3.5854987448095083`*^9, 3.585498805019216*^9}},
 CellLabel->"In[10]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "29"}], "}"}]], "Output",
 CellChangeTimes->{3.585498806318758*^9},
 CellLabel->"Out[10]="]
}, Open  ]],

Cell["\<\
# stands for the current element of the list and & indicates that the \
preceding argument should be treated as a function. A slightly more efficient \
way to do this would be to use one Map to create the list that the other \
applies to:\
\>", "Text",
 CellChangeTimes->{{3.585498840320257*^9, 3.585498853127613*^9}, {
  3.585498884305119*^9, 3.585498898832192*^9}, {3.5854989715909643`*^9, 
  3.585498992527226*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"#", " ", ">", " ", "25"}], ",", " ", "#", ",", " ", "0"}], 
     "]"}], " ", "&"}], ",", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"Total", ",", " ", "myMatrix"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.585499012219975*^9, 3.5854990328082533`*^9}},
 CellLabel->"In[11]:="],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "29"}], "}"}]], "Output",
 CellChangeTimes->{3.585499036008771*^9},
 CellLabel->"Out[11]="]
}, Open  ]],

Cell["\<\
This is more efficient because it never applies Total to the same sublist \
twice.\
\>", "Text",
 CellChangeTimes->{{3.58549904830482*^9, 3.585499063934626*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Branching", "Subsection",
 CellChangeTimes->{{3.583508115068471*^9, 3.583508127537744*^9}, 
   3.5835132732886868`*^9, {3.5835133065487547`*^9, 3.583513313419819*^9}}],

Cell[TextData[{
 "The only branching construct you are likely to need is ",
 StyleBox["If",
  FontFamily->"Courier"],
 ":"
}], "Text",
 CellChangeTimes->{{3.583591857036968*^9, 3.5835918854740553`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"takeoff", "[", "x_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"x", ">", "1"}], ",", 
    RowBox[{"x", "^", "2"}], ",", "x"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.5835918928594418`*^9, 3.5835919488025837`*^9}, {
  3.58359200967343*^9, 3.5835920379009237`*^9}, {3.583592092351173*^9, 
  3.5835920926686277`*^9}},
 CellLabel->"In[228]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"takeoff", "[", "0.5", "]"}]], "Input",
 CellChangeTimes->{{3.5835919564897337`*^9, 3.583591972386897*^9}, {
  3.5835920525237226`*^9, 3.583592053950227*^9}, {3.583592103667612*^9, 
  3.58359210465126*^9}},
 CellLabel->"In[229]:="],

Cell[BoxData["0.5`"], "Output",
 CellChangeTimes->{
  3.5835919736499443`*^9, {3.58359204599802*^9, 3.5835920555505047`*^9}, 
   3.583592105844428*^9, 3.5844682188487864`*^9, 3.584468488958961*^9, 
   3.584471864816959*^9},
 CellLabel->"Out[229]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"takeoff", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.583591975384322*^9, 3.58359198248238*^9}, {
  3.583592061149267*^9, 3.583592064380733*^9}, {3.583592109789077*^9, 
  3.583592110058578*^9}},
 CellLabel->"In[230]:="],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.583591983164665*^9, 3.58359206728345*^9, 
  3.583592110865385*^9, 3.584468218913898*^9, 3.584468488989685*^9, 
  3.584471864862749*^9},
 CellLabel->"Out[230]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"takeoff", "[", "1.5", "]"}]], "Input",
 CellChangeTimes->{{3.583591984383312*^9, 3.583591990492013*^9}, {
  3.583592072060067*^9, 3.583592078340538*^9}, {3.5835921155721693`*^9, 
  3.583592115786072*^9}},
 CellLabel->"In[231]:="],

Cell[BoxData["2.25`"], "Output",
 CellChangeTimes->{3.583591991818355*^9, 3.5835920789031487`*^9, 
  3.583592116727152*^9, 3.5844682189464273`*^9, 3.584468489022511*^9, 
  3.584471864896957*^9},
 CellLabel->"Out[231]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"takeoff", "[", "y", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", " ", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.583592119698324*^9, 3.583592181324089*^9}},
 CellLabel->"In[232]:="],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1:eJxFzHk8lHkcB/AxI4+jZpmEtmKedpREvDaVc3/fLYuWSirZyhFKtFGtdZRr
bGNpi5jkzK5IMq4ObWlINaQWL1dLEQZ5dTiewTQ5Z+0fPc8fn9f79fn88cG9
g1yO0Gk0WvBC/vdQlFG7XD726Is94/bqE1JKLz8fp6GPlEecM0UNHZSBq5Ur
MsoouXUDqRs9KQuYWfv9qkdJiRyVrqaIEdKim9rtvz39QGoT02sQaP6ONLAj
Xk238i1prY5P351FA6RSfZl6dHQfaZplmJ9XXBdptGFt/Y61/5Iuv80TX+e0
kMpXOFfxjz8j9VT67OR9sZK05GiQxZobmaTFjNM26GUJ+qLDI/mn0rjHpGr7
eveFnGwgNQrOrubz20jZBS8zuSmdpPWMkpS8uTekvb7x/sZxYtK77gnaedsG
ST++LNyyZ3KIdHssc7Yx5D0p13Zbk7fJMOkB01VOFywozVbKnldsoxyaKKpV
dqN0ymNVlcZQ6tD7BdMtlOWPYhJSgkdIzwsOYMIoSp80M97beEqtoHcx5lcp
I3Sdw3pqKR0i9fwMtUdJ+yyrbZ88oPz7L6/i+08pE5UYmmWNlNat9gNZYsp0
/xburypjpM7pg9UGP1GunY9bo+dDOe+zLnHZCcpik0B3OpdS+ZlspquQstco
06f1NuW9FOt/6oWUvh7czIpmSivRN/Ti15Qswzr/a4OUH5KOtaSPUj6Wqlok
faZsKHFt3qpAoFY/3UoenUD3+9YqfqdEoCT0NDRqMYHyl05tsVAj0L6q47vO
aC3sdi+Om6kTiCPW/j6cTSAb1ldWOIdAouFhtcsOBMq4mf5q2pFAr/XtYj0y
CLS7U6BVmkWgg3oVEjsbCTp2Mz1qWS6BDk2Iq2IcJCjmDG8oooBAQocE0+o9
ElS60vOe4y0CJYfaq9gGSJDqYZbr+zoCZb/lxp9NkyDR+7BUzjiBrBljVRnj
EmQ+84Nm1sJPim2RIl8wjvR0+zTipQu9N18h3GAS0aK2eNqbTyBp6WxIkJYM
NR0LubP0yiSyM9MfL4+YRjv5IogckaLv7EO7jZfMI3HHJnaDsQyl6ERNab2g
weEbiUoGCZ+RxLTmHdZMh8lLqsi/cQqpe7nQVjQpgkVlarm92gxKKx6aWNyl
BAGByus2+s6ijzSxPd9UBcqscyYYBXPoz/bE07ZhaiBOXVErpsuR/yfX8tQl
TOAregS7cGiwI/uku8xBHZg9FdfoIhrQ+PO8o8kaQIvk7rU4pQDRlobMh4yl
MFPoUdbPosPbb9fvuxygCScyyy6yntAhnttQ0zW3DO6vj1fWCGTA3tfnc9zT
tWHxj6eNYpmK0M1nprlwlkOHcXNbuFARgkqWi7p7vwZBDuIMeiyCU1Je/vY/
VoJb2WaNVfOLQN5vZ9BsqQtnebnc7iIlMB5kRkcz2VD4blUW0wkD41Bvkcon
Npy7yvPq2YmByXTv4tXTbPByGdEv3Y1B5GBnm+U8G7SFwvId+zGYHbV+c0IJ
h7ikg3UXvDFI7Gp880oLB9/NGRLVcAxmWEuvPN+CA/ucpgNWgMHktOEAdgaH
WfOIJR2FGET4LZsxicKhc2SgtUCAwS6rs8lusTgk7b/jbncLg1c6DywE53GY
N3T5hSfEgCuYC3XNwqG7JSmH0YaBjkmRQCTE4X6czKftJQbe6o6CyRocLlt5
rsvrxGDKzW+dfi0Ojtc33N3ag4Eym5X7eyMOlWGNz7nvMXjIM41y6cHhivGm
pN3DGBzNLT4V14/Dqf7svfgYBoc4+QOVQzgYOP3cWzOJwQavRdv0x3BQVGjP
vyTDQHV5kOnBCRz6KqwCvKYx2GixNztZhoMwIM/EdA6DGzV34+pncEjTU5PK
5Qv/ZZfG5HIc/gOIKZ91
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  ImageSize->{182.62499999999966`, Automatic},
  Method->{},
  PlotRange->{{-1, 3}, {-0.9999999183673469, 8.999999510204088}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{{3.583592150439281*^9, 3.583592184128358*^9}, 
   3.584468219132188*^9, 3.5844684890567417`*^9, 3.5844718649519253`*^9},
 CellLabel->"Out[232]="]
}, Open  ]],

Cell[TextData[{
 "Unlike other ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " functions, the arguments to ",
 StyleBox["If",
  FontFamily->"Courier"],
 " are not all evaluated first and then passed in to ",
 StyleBox["If",
  FontFamily->"Courier"],
 ". Only the first argument is evaluated -- if it returns ",
 StyleBox["True",
  FontFamily->"Courier"],
 " the second argument is evaluated and its value is returned, but the third \
argument is never evaluated. If it returns ",
 StyleBox["False",
  FontFamily->"Courier"],
 ", the third argument is evaluated but the second is not. If the arguments \
are expressions whose evaluation has side effects, like those involving \
Print, the side effects will not occur as they would in arguments to a normal \
function:"
}], "Text",
 CellChangeTimes->{{3.5835927507863827`*^9, 3.5835929801457853`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"3", ">", "7"}], ",", " ", 
   RowBox[{"Print", "[", "\"\<It is!\>\"", "]"}], ",", " ", 
   RowBox[{"Print", "[", "\"\<It isn't!\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.5835929836539927`*^9, 3.583593031986656*^9}},
 CellLabel->"In[233]:="],

Cell[BoxData["\<\"It isn't!\"\>"], "Print",
 CellChangeTimes->{3.5835930332399673`*^9, 3.584468219151143*^9, 
  3.584468489073407*^9, 3.5844718649993687`*^9},
 CellLabel->"During evaluation of In[233]:="]
}, Open  ]],

Cell[TextData[{
 "In peculiar ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " style, an ",
 StyleBox["If",
  FontFamily->"Courier"],
 " expression whose first argument does not evaluate to either ",
 StyleBox["True",
  FontFamily->"Courier"],
 " or ",
 StyleBox["False",
  FontFamily->"Courier"],
 " remains unevaluated:"
}], "Text",
 CellChangeTimes->{{3.583592231812726*^9, 3.583592303290517*^9}, {
  3.5835931737659187`*^9, 3.583593188970536*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"z", ">", "10"}], ",", "1", ",", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.583592322590314*^9, 3.583592336772087*^9}},
 CellLabel->"In[234]:="],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"z", ">", "10"}], ",", "1", ",", "0"}], "]"}]], "Output",
 CellChangeTimes->{3.583592337816122*^9, 3.5844682191978817`*^9, 
  3.584468489107888*^9, 3.584471865117819*^9},
 CellLabel->"Out[234]="]
}, Open  ]],

Cell[TextData[{
 "Since ",
 StyleBox["z",
  FontFamily->"Courier"],
 " is not defined the whole expression remains unevaluated. If you provide If \
with a fourth argument, it will evaluate that in case the first argument \
doesn\[CloseCurlyQuote]t yield a Boolean:"
}], "Text",
 CellChangeTimes->{{3.58359234196377*^9, 3.583592451065941*^9}, {
  3.583592501334112*^9, 3.583592506857657*^9}, {3.584470669331595*^9, 
  3.584470669899815*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"z", ">", "10"}], ",", "1", ",", "0", ",", " ", 
   RowBox[{"Print", "[", "\"\<Error! z is not defined.\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.583592322590314*^9, 3.583592336772087*^9}, {
  3.5835924552619457`*^9, 3.583592488420425*^9}},
 CellLabel->"In[235]:="],

Cell[BoxData["\<\"Error! z is not defined.\"\>"], "Print",
 CellChangeTimes->{3.583592489551729*^9, 3.584468219248579*^9, 
  3.584468489139324*^9, 3.584471865198921*^9},
 CellLabel->"During evaluation of In[235]:="]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Practice: Using ",
 StyleBox["If",
  FontFamily->"Courier",
  FontWeight->"Plain"]
}], "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.583514468298832*^9, 
  3.583514469463975*^9}, {3.583517624331842*^9, 3.583517631065776*^9}, {
  3.583519420630145*^9, 3.583519422650053*^9}, {3.583593252177696*^9, 
  3.5835932568982153`*^9}}],

Cell[TextData[{
 "Write a function called ",
 StyleBox["reverseString",
  FontFamily->"Courier"],
 " that takes a single argument, tests whether it is a string (see ",
 StyleBox["StringQ",
  FontFamily->"Courier"],
 "), if so returns its reverse (see ",
 StyleBox["StringReverse",
  FontFamily->"Courier"],
 "), and if not prints an error message. Demonstrate your function on both a \
multi-character string and a non-string. "
}], "Text",
 CellChangeTimes->{{3.583593249427387*^9, 3.583593249705818*^9}, {
   3.583593687876289*^9, 3.583593808631219*^9}, 3.6091709549678583`*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"reverseString", "[", "i_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"StringQ", "[", "i", "]"}], ",", 
    RowBox[{"StringReverse", "[", "i", "]"}], ",", 
    RowBox[{"Print", "[", "\"\<error, not a string\>\"", "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"reverseString", "[", "\"\<hey hey hey y'all\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.6091709661953278`*^9, 3.6091709902366533`*^9}},
 CellLabel->"In[63]:="],

Cell[BoxData["\<\"lla'y yeh yeh yeh\"\>"], "Output",
 CellChangeTimes->{{3.609170984129624*^9, 3.609170990855639*^9}},
 CellLabel->"Out[64]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reverseString", "[", "6", "]"}]], "Input",
 CellChangeTimes->{{3.60917099300666*^9, 3.609170998770521*^9}},
 CellLabel->"In[65]:="],

Cell[BoxData["\<\"error, not a string\"\>"], "Print",
 CellChangeTimes->{3.609170999413443*^9},
 CellLabel->"During evaluation of In[65]:="]
}, Open  ]],

Cell["\[FilledSquare]", "Text",
 CellChangeTimes->{3.609170957359832*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Reading and writing to a file", "Subsection",
 CellChangeTimes->{{3.5835081568402576`*^9, 3.583508159041904*^9}, {
  3.583594357692997*^9, 3.583594362514318*^9}}],

Cell["\<\
At first, you\[CloseCurlyQuote]ll probably do a lot of simple code testing \
through the notebook interface, but when it comes to real data, you\
\[CloseCurlyQuote]ll need to read and write files. Let\[CloseCurlyQuote]s \
start with writing. \
\>", "Text",
 CellChangeTimes->{{3.583593838284127*^9, 3.583593873137949*^9}}],

Cell[CellGroupData[{

Cell["Incorporated reading", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.58351378178043*^9, 
  3.583513789745801*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Read the documentation page tutorial/ReadingAndWritingMathematicaFiles up \
to and including the section \[OpenCurlyDoubleQuote]Saving Definitions of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Objects\[CloseCurlyDoubleQuote].  When you get to \
\[OpenCurlyDoubleQuote]Saving ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " Definitions in Encoded Form\[CloseCurlyDoubleQuote] you can abort your \
read."
}], "Item",
 CellChangeTimes->{{3.58504961516019*^9, 3.585049623311686*^9}}],

Cell["\<\
 Read tutorial/NamingAndFindingFiles. This is kind of long and you can read \
quickly through some of the latter parts. The important thing is to know what\
\[CloseCurlyQuote]s in this tutorial so you can come back to it later when \
you need to work with files more.\
\>", "Item",
 CellChangeTimes->{{3.58504961516019*^9, 3.585049687153483*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Practice: Reading and writing expressions\
\>", "Subsubsubsection",
 CellChangeTimes->{{3.583175578135281*^9, 3.583175585252611*^9}, {
  3.583237215724431*^9, 3.583237230152749*^9}, {3.583237385305098*^9, 
  3.583237408360573*^9}, {3.583350266707965*^9, 3.5833502680112123`*^9}, {
  3.58342604161637*^9, 3.58342604629023*^9}, {3.583498856500457*^9, 
  3.5834988629059267`*^9}, {3.583505142291054*^9, 3.5835051472415533`*^9}, {
  3.583512441172587*^9, 3.5835124550655746`*^9}, {3.583514468298832*^9, 
  3.583514469463975*^9}, {3.583517624331842*^9, 3.583517631065776*^9}, {
  3.583519420630145*^9, 3.583519422650053*^9}, {3.583593252177696*^9, 
  3.5835932568982153`*^9}, {3.583594412524489*^9, 3.583594418409972*^9}}],

Cell[TextData[{
 "The functions ",
 StyleBox["Put",
  FontFamily->"Courier"],
 " (equivalent to ",
 StyleBox[">>",
  FontFamily->"Courier"],
 ") and ",
 StyleBox["Get",
  FontFamily->"Courier"],
 " (equivalent to ",
 StyleBox["<<",
  FontFamily->"Courier"],
 ") exchange expressions with files. Since everything in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " is an expression, you can read and write anything this way. Copy the code \
you wrote for generating a random DNA sequence and modify it to take a second \
argument which will specify a directory path. (If you don\[CloseCurlyQuote]t \
know how to specify directory paths as strings on your system, use the menu \
sequence Insert->File Path and select and file to see its pathname.) First \
test whether the file exists using ",
 StyleBox["FileExistsQ",
  FontFamily->"Courier"],
 ". If so, use ",
 StyleBox["Get",
  FontFamily->"Courier"],
 " (which returns the value of the last expression in the file) to initialize \
your DNA string. Then generate ",
 StyleBox["n",
  FontFamily->"Courier"],
 " random DNA letters, adding them on to the end of the string you read in. \
Finally, write out the new string to the filename provided using ",
 StyleBox["Put",
  FontFamily->"Courier"],
 ", which will create the file if it doesn\[CloseCurlyQuote]t exist. \
Demonstrate that your program works by calling it twice with the same \
filename, adding 5 letters the first time and 7 second."
}], "Text",
 CellChangeTimes->{{3.583594432874387*^9, 3.58359446158661*^9}, {
   3.583594499729988*^9, 3.583594562969483*^9}, {3.583594668236843*^9, 
   3.583594681929487*^9}, {3.583594728114304*^9, 3.5835947299622583`*^9}, {
   3.583594763634069*^9, 3.5835947831460257`*^9}, {3.583595228593663*^9, 
   3.583595391154196*^9}, {3.583595687656233*^9, 3.5835957143211803`*^9}, {
   3.583595860851985*^9, 3.583596053730402*^9}, {3.583596124167262*^9, 
   3.5835961352031307`*^9}, {3.583596229181991*^9, 3.583596293850377*^9}, 
   3.584447212460146*^9, {3.584448244439622*^9, 3.584448260444366*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomDNAio", "[", 
   RowBox[{"n_", ",", "filename_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"nucleotides", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\<A\>\"", ",", "\"\<T\>\"", ",", "\"\<C\>\"", ",", "\"\<G\>\""}], 
        "}"}]}], ",", 
      RowBox[{"output", "=", "\"\<\>\""}]}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FileExistsQ", "[", "filename", "]"}], ",", 
        RowBox[{"output", "=", 
         RowBox[{"Get", "[", "filename", "]"}]}], ",", " ", 
        RowBox[{"Put", "[", "filename", "]"}]}], "]"}], " ", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"output", "=", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"output", ",", 
           RowBox[{"nucleotides", "[", 
            RowBox[{"[", 
             RowBox[{"Random", "[", 
              RowBox[{"Integer", ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}], "]"}]}], 
          "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "n"}], "}"}]}], "]"}]}], ";", 
     RowBox[{"Put", "[", 
      RowBox[{"output", ",", "filename"}], "]"}], ";", " ", "output"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6091710630833406`*^9, 3.6091711095823402`*^9}, {
  3.60917115208637*^9, 3.609171188590869*^9}},
 CellLabel->"In[72]:="],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomDNAio", "[", 
  RowBox[{"5", ",", "\"\<~/Documents/output.txt\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.609171066889306*^9, 3.609171071937756*^9}, {
  3.609171115578185*^9, 3.609171126346662*^9}},
 CellLabel->"In[74]:="],

Cell[BoxData["\<\"GACGG\"\>"], "Output",
 CellChangeTimes->{{3.6091711909160852`*^9, 3.6091712038092413`*^9}},
 CellLabel->"Out[74]="]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"randomDNAio", "[", 
  RowBox[{"7", ",", "\"\<~/Documents/output.txt\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.609171205947926*^9, 3.609171223301688*^9}},
 CellLabel->"In[76]:="],

Cell[BoxData["\<\"GACGGGCATCGT\"\>"], "Output",
 CellChangeTimes->{{3.6091712195834312`*^9, 3.609171223869226*^9}},
 CellLabel->"Out[76]="]
}, Open  ]],

Cell["\[FilledSquare]", "Text",
 CellChangeTimes->{{3.609171306553721*^9, 3.609171313743869*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Syntax Coloring", "Subsection",
 CellChangeTimes->{{3.5844525813905487`*^9, 3.584452583990345*^9}}],

Cell["\<\
Mathematica\[CloseCurlyQuote]s syntax coloring can often help you spot syntax \
errors.  

Undefined variables are colored blue:\
\>", "Text",
 CellChangeTimes->{{3.584452593663124*^9, 3.5844526425108137`*^9}, {
  3.584452844181183*^9, 3.584452845020204*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Tabel", "[", 
    RowBox[{"x", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "1", ",", "10"}]}]}]}], "]"}], 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"The", " ", "function"}], ",", " ", "Tabel", ",", " ", 
    RowBox[{"is", " ", "colored", " ", "blue", " ", "because", " ", "it", " ", 
     RowBox[{"undefined", ".", "  ", "Tabel"}], " ", "is", " ", "probably", 
     " ", "a", " ", 
     RowBox[{"typo", "."}]}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{3.584471142431849*^9},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[236]:="],

Cell[TextData[{
 StyleBox["Defined variables are colored black.  (Aside -- many of the \
variables in input cells in this notebook will appear blue even though they \
have been defined in previous input cells. That\[CloseCurlyQuote]s because \
cells are not evaluated by default when a notedbook is loaded. The output you \
see in this notebook is not from the kernel instance you are running now, it\
\[CloseCurlyQuote]s from the kernel instance I was running when I wrote it.) \
Once a variable is defined, ",
  FontColor->GrayLevel[0]],
 StyleBox["all",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" instances of the variable in the notebook will be defined and \
colored black.\n\n",
  FontColor->GrayLevel[0]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->GrayLevel[0]],
 StyleBox[" highlights missing delimiters:",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.584452830644156*^9, 3.584452891100513*^9}, 
   3.584453534665557*^9, {3.5846473725241737`*^9, 3.584647500361959*^9}, {
   3.5849934080716763`*^9, 3.584993408431172*^9}, 3.585049789472383*^9},
 FontColor->RGBColor[1, 0, 1]],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"x", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "10"}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.584452893289674*^9, 3.584452904448132*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[236]:="],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notes missing arguments:"
}], "Text",
 CellChangeTimes->{{3.584452931747706*^9, 3.584452954196576*^9}, {
  3.584471026443902*^9, 3.584471027620002*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.584452939717114*^9, 3.584452947158801*^9}},
 CellLabel->"In[236]:="],

Cell[BoxData["x"], "Output",
 CellChangeTimes->{3.584452947748825*^9, 3.584468219665874*^9, 
  3.584468489477972*^9, 3.584471865583605*^9},
 CellLabel->"Out[236]="]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notes extra arguments:"
}], "Text",
 CellChangeTimes->{{3.584452969228348*^9, 3.58445297393468*^9}, {
  3.584471020318222*^9, 3.584471022548151*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"x", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.584452977510995*^9, 3.584452996927787*^9}},
 CellLabel->"In[237]:="],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"Length", "::", "argx"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"\[NoBreak]\\!\\(Length\\)\[NoBreak] called with \[NoBreak]\
\\!\\(2\\)\[NoBreak] arguments; 1 argument is expected. \\!\\(\\*ButtonBox[\\\
\"\[RightSkeleton]\\\", ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/argx\\\", ButtonNote -> \
\\\"Length::argx\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.5844529976188107`*^9, 3.584468219750704*^9, 
  3.584468489524403*^9, 3.584471865635549*^9},
 CellLabel->"During evaluation of In[237]:="],

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"x", ",", "1"}], "]"}]], "Output",
 CellChangeTimes->{3.584452997622038*^9, 3.584468219754171*^9, 
  3.584468489526723*^9, 3.584471865637786*^9},
 CellLabel->"Out[237]="]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " highlights arguments of user-defined functions:"
}], "Text",
 CellChangeTimes->{{3.584453020932613*^9, 3.5844530332359753`*^9}, {
  3.584471063885538*^9, 3.584471064860277*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", " ", 
  RowBox[{"x", "^", "2"}]}]], "Input",
 CellChangeTimes->{{3.584453034937583*^9, 3.584453040012398*^9}},
 CellLabel->"In[238]:="]
}, Open  ]],

Cell[CellGroupData[{

Cell["Aborting calculations", "Subsection",
 CellChangeTimes->{{3.584452958765066*^9, 3.584452963503364*^9}, {
  3.584453162736266*^9, 3.584453173139114*^9}}],

Cell["\<\
To abort a calculation, on the menu select Evaluation -> Abort Calculation or \
Alt+..  If this doesn\[CloseCurlyQuote]t work, try Evaluation -> Quit \
Kernel/Local.  This will stop the kernel, but it will not close your \
notebook.  To restart the kernel, evaluate a cell in the notebook.  A third \
option is to quit Mathematica; however, all unsaved changes will be lost.\
\>", "Text",
 CellChangeTimes->{{3.58445318156131*^9, 3.5844533254012423`*^9}, {
  3.585006023184924*^9, 3.5850060240873337`*^9}, {3.609171273631068*^9, 
  3.609171282375258*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{772, 756},
WindowMargins->{{-10, Automatic}, {182, Automatic}},
ShowSelection->True,
CellLabelAutoDelete->False,
FrontEndVersion->"9.0 for Linux x86 (64-bit) (January 25, 2013)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData["Code"]]}, Visible -> False, FrontEndVersion -> 
  "9.0 for Linux x86 (64-bit) (January 25, 2013)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info3584453862-7388097"->{
  Cell[31771, 773, 3795, 59, 158, "Print",
   CellTags->"Info3584453862-7388097"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info3584453862-7388097", 138851, 3769}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 164, 5, 93, "Title"],
Cell[CellGroupData[{
Cell[768, 31, 104, 1, 81, "Section"],
Cell[875, 34, 2261, 48, 211, "Text"],
Cell[CellGroupData[{
Cell[3161, 86, 252, 8, 32, "Input",
 Evaluatable->False],
Cell[3416, 96, 347, 9, 32, "Output"]
}, Open  ]],
Cell[3778, 108, 1191, 23, 112, "Text"],
Cell[CellGroupData[{
Cell[4994, 135, 287, 9, 32, "Input",
 Evaluatable->False],
Cell[5284, 146, 305, 7, 34, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5626, 158, 409, 7, 29, "Subsubsubsection"],
Cell[6038, 167, 2821, 65, 277, "Text"],
Cell[CellGroupData[{
Cell[8884, 236, 226, 6, 37, "Input"],
Cell[9113, 244, 210, 7, 32, "Output"]
}, Open  ]],
Cell[9338, 254, 168, 4, 32, "Text"],
Cell[9509, 260, 143, 2, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9689, 267, 421, 6, 29, "Subsubsubsection"],
Cell[10113, 275, 768, 13, 91, "Text"],
Cell[CellGroupData[{
Cell[10906, 292, 1012, 15, 163, "ItemNumbered"],
Cell[11921, 309, 595, 11, 68, "ItemNumbered"],
Cell[12519, 322, 853, 17, 88, "ItemNumbered"],
Cell[13375, 341, 589, 13, 68, "ItemNumbered"]
}, Open  ]],
Cell[13979, 357, 170, 2, 31, "Text"],
Cell[14152, 361, 199, 3, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14388, 369, 116, 1, 45, "Subsection"],
Cell[14507, 372, 3138, 60, 392, "Text"],
Cell[CellGroupData[{
Cell[17670, 436, 320, 4, 29, "Subsubsubsection"],
Cell[17993, 442, 526, 12, 52, "Text"],
Cell[CellGroupData[{
Cell[18544, 458, 480, 11, 32, "Input"],
Cell[19027, 471, 490, 10, 32, "Output"]
}, Open  ]],
Cell[19532, 484, 519, 16, 32, "Text"],
Cell[20054, 502, 2213, 53, 215, "Text"],
Cell[22270, 557, 431, 7, 91, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22738, 569, 363, 5, 29, "Subsubsubsection"],
Cell[23104, 576, 480, 9, 55, "Input"],
Cell[23587, 587, 98, 1, 31, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[23746, 595, 314, 7, 81, "Section"],
Cell[24063, 604, 1875, 30, 271, "Text"],
Cell[CellGroupData[{
Cell[25963, 638, 597, 13, 84, "Item"],
Cell[26563, 653, 553, 11, 66, "Item"],
Cell[27119, 666, 331, 8, 30, "Item"],
Cell[27453, 676, 1181, 22, 85, "Item"],
Cell[CellGroupData[{
Cell[28659, 702, 177, 4, 26, "Subitem"],
Cell[28839, 708, 679, 10, 115, "Subitem"],
Cell[29521, 720, 448, 7, 79, "Subitem"],
Cell[29972, 729, 335, 6, 61, "Subitem"],
Cell[30310, 737, 735, 11, 133, "Subitem"]
}, Open  ]]
}, Open  ]],
Cell[31072, 752, 533, 12, 52, "Text"],
Cell[CellGroupData[{
Cell[31630, 768, 138, 3, 32, "Input"],
Cell[31771, 773, 3795, 59, 158, "Print",
 CellTags->"Info3584453862-7388097"]
}, Open  ]],
Cell[35581, 835, 528, 12, 51, "Text"],
Cell[CellGroupData[{
Cell[36134, 851, 474, 8, 29, "Subsubsubsection"],
Cell[36611, 861, 249, 7, 32, "Text"],
Cell[36863, 870, 647, 12, 68, "ItemNumbered"],
Cell[37513, 884, 198, 7, 111, "Text"],
Cell[37714, 893, 937, 24, 110, "ItemNumbered"],
Cell[CellGroupData[{
Cell[38676, 921, 255, 7, 37, "Input"],
Cell[38934, 930, 271, 7, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39242, 942, 267, 7, 37, "Input"],
Cell[39512, 951, 289, 7, 32, "Output"]
}, Open  ]],
Cell[39816, 961, 271, 4, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40124, 970, 110, 1, 45, "Subsection"],
Cell[40237, 973, 888, 16, 151, "Text"],
Cell[41128, 991, 544, 10, 83, "Item"],
Cell[CellGroupData[{
Cell[41697, 1005, 428, 7, 29, "Subsubsubsection"],
Cell[42128, 1014, 1094, 20, 171, "Text"],
Cell[43225, 1036, 716, 17, 70, "ItemNumbered"],
Cell[CellGroupData[{
Cell[43966, 1057, 222, 5, 34, "Input"],
Cell[44191, 1064, 269, 7, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44497, 1076, 210, 5, 34, "Input"],
Cell[44710, 1083, 289, 7, 32, "Output"]
}, Open  ]],
Cell[45014, 1093, 616, 9, 49, "ItemNumbered"],
Cell[CellGroupData[{
Cell[45655, 1106, 470, 11, 32, "Input"],
Cell[46128, 1119, 651, 18, 55, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46816, 1142, 153, 3, 32, "Input"],
Cell[46972, 1147, 930, 26, 145, "Output"]
}, Open  ]],
Cell[47917, 1176, 96, 1, 31, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[48074, 1184, 113, 1, 81, "Section"],
Cell[CellGroupData[{
Cell[48212, 1189, 169, 2, 45, "Subsection"],
Cell[48384, 1193, 363, 6, 71, "Text"],
Cell[CellGroupData[{
Cell[48772, 1203, 163, 4, 32, "Input",
 Evaluatable->False],
Cell[48938, 1209, 165, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49140, 1217, 170, 4, 32, "Input",
 Evaluatable->False],
Cell[49313, 1223, 163, 3, 32, "Output"]
}, Open  ]],
Cell[49491, 1229, 215, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[49731, 1237, 138, 3, 32, "Input"],
Cell[49872, 1242, 213, 4, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50122, 1251, 163, 4, 32, "Input",
 Evaluatable->False],
Cell[50288, 1257, 164, 3, 32, "Output"]
}, Open  ]],
Cell[50467, 1263, 403, 9, 71, "Text"],
Cell[CellGroupData[{
Cell[50895, 1276, 212, 5, 32, "Input",
 Evaluatable->False],
Cell[51110, 1283, 215, 4, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51362, 1292, 245, 7, 32, "Input",
 Evaluatable->False],
Cell[51610, 1301, 244, 6, 34, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51891, 1312, 369, 11, 37, "Input",
 Evaluatable->False],
Cell[52263, 1325, 213, 4, 32, "Output"]
}, Open  ]],
Cell[52491, 1332, 1261, 22, 231, "Text"],
Cell[CellGroupData[{
Cell[53777, 1358, 248, 6, 32, "Input",
 Evaluatable->False],
Cell[54028, 1366, 167, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54232, 1374, 309, 8, 32, "Input",
 Evaluatable->False],
Cell[54544, 1384, 400, 9, 32, "Output"]
}, Open  ]],
Cell[54959, 1396, 580, 15, 72, "Text"],
Cell[CellGroupData[{
Cell[55564, 1415, 182, 4, 32, "Input"],
Cell[55749, 1421, 170, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55956, 1429, 320, 8, 32, "Input",
 Evaluatable->False],
Cell[56279, 1439, 301, 7, 32, "Output"]
}, Open  ]],
Cell[56595, 1449, 521, 11, 91, "Text"],
Cell[CellGroupData[{
Cell[57141, 1464, 252, 6, 32, "Input"],
Cell[57396, 1472, 193, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57626, 1480, 180, 4, 32, "Input",
 Evaluatable->False],
Cell[57809, 1486, 191, 3, 32, "Output"]
}, Open  ]],
Cell[58015, 1492, 1390, 31, 195, "Text"],
Cell[59408, 1525, 232, 6, 32, "Input"],
Cell[59643, 1533, 1188, 23, 72, "Text"],
Cell[CellGroupData[{
Cell[60856, 1560, 180, 4, 32, "Input",
 Evaluatable->False],
Cell[61039, 1566, 218, 4, 32, "Output"]
}, Open  ]],
Cell[61272, 1573, 669, 10, 91, "Text"],
Cell[CellGroupData[{
Cell[61966, 1587, 177, 4, 32, "Input"],
Cell[62146, 1593, 164, 3, 32, "Output"]
}, Open  ]],
Cell[62325, 1599, 433, 12, 32, "Input"],
Cell[CellGroupData[{
Cell[62783, 1615, 279, 8, 32, "Input",
 Evaluatable->False],
Cell[63065, 1625, 306, 7, 32, "Output"]
}, Open  ]],
Cell[63386, 1635, 289, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[63700, 1644, 226, 5, 32, "Input"],
Cell[63929, 1651, 197, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64163, 1659, 226, 5, 32, "Input"],
Cell[64392, 1666, 194, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[64623, 1674, 190, 4, 32, "Input",
 Evaluatable->False],
Cell[64816, 1680, 197, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[65050, 1688, 188, 4, 32, "Input",
 Evaluatable->False],
Cell[65241, 1694, 213, 4, 32, "Output"]
}, Open  ]],
Cell[65469, 1701, 254, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[65748, 1710, 218, 5, 32, "Input"],
Cell[65969, 1717, 220, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66226, 1725, 208, 5, 32, "Input",
 Evaluatable->False],
Cell[66437, 1732, 195, 3, 32, "Output"]
}, Open  ]],
Cell[66647, 1738, 441, 9, 52, "Text"],
Cell[CellGroupData[{
Cell[67113, 1751, 195, 5, 32, "Input"],
Cell[67311, 1758, 177, 3, 32, "Output"]
}, Open  ]],
Cell[67503, 1764, 252, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[67780, 1773, 266, 7, 32, "Input"],
Cell[68049, 1782, 253, 6, 32, "Output"]
}, Open  ]],
Cell[68317, 1791, 174, 4, 31, "Text"],
Cell[CellGroupData[{
Cell[68516, 1799, 185, 4, 32, "Input"],
Cell[68704, 1805, 174, 3, 32, "Output"]
}, Open  ]],
Cell[68893, 1811, 693, 16, 91, "Text"],
Cell[CellGroupData[{
Cell[69611, 1831, 164, 3, 32, "Input"],
Cell[69778, 1836, 283, 7, 32, "Output"]
}, Open  ]],
Cell[70076, 1846, 604, 10, 92, "Text"],
Cell[CellGroupData[{
Cell[70705, 1860, 270, 7, 32, "Input",
 Evaluatable->False],
Cell[70978, 1869, 637, 13, 24, "Message"],
Cell[71618, 1884, 248, 5, 32, "Output"]
}, Open  ]],
Cell[71881, 1892, 2152, 69, 131, "Text"],
Cell[CellGroupData[{
Cell[74058, 1965, 108, 1, 29, "Subsubsubsection"],
Cell[74169, 1968, 1104, 23, 151, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[75310, 1996, 186, 4, 29, "Subsubsubsection"],
Cell[75499, 2002, 418, 10, 32, "Text"],
Cell[75920, 2014, 224, 5, 32, "Input"],
Cell[76147, 2021, 413, 9, 52, "Text"],
Cell[76563, 2032, 191, 4, 32, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76791, 2041, 505, 7, 29, "Subsubsubsection"],
Cell[77299, 2050, 272, 6, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77608, 2061, 519, 8, 29, "Subsubsubsection"],
Cell[78130, 2071, 570, 15, 68, "ItemNumbered"],
Cell[78703, 2088, 476, 13, 32, "Input"],
Cell[CellGroupData[{
Cell[79204, 2105, 145, 3, 32, "Input"],
Cell[79352, 2110, 813, 22, 111, "Output"]
}, Open  ]],
Cell[80180, 2135, 539, 8, 87, "ItemNumbered"],
Cell[80722, 2145, 415, 12, 53, "Input"],
Cell[CellGroupData[{
Cell[81162, 2161, 175, 4, 32, "Input"],
Cell[81340, 2167, 226, 6, 49, "Output"]
}, Open  ]],
Cell[81581, 2176, 99, 1, 31, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[81729, 2183, 137, 2, 45, "Subsection"],
Cell[81869, 2187, 1505, 22, 291, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[83411, 2214, 98, 1, 45, "Subsection"],
Cell[83512, 2217, 299, 5, 71, "Text"],
Cell[CellGroupData[{
Cell[83836, 2226, 364, 8, 32, "Input"],
Cell[84203, 2236, 351, 7, 32, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[84603, 2249, 161, 2, 45, "Subsection"],
Cell[84767, 2253, 482, 11, 52, "Text"],
Cell[CellGroupData[{
Cell[85274, 2268, 505, 7, 29, "Subsubsubsection"],
Cell[85782, 2277, 1351, 26, 194, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[87170, 2308, 504, 7, 29, "Subsubsubsection"],
Cell[87677, 2317, 563, 11, 69, "ItemNumbered"],
Cell[CellGroupData[{
Cell[88265, 2332, 359, 8, 55, "Input"],
Cell[88627, 2342, 183, 3, 23, "Print"]
}, Open  ]],
Cell[88825, 2348, 388, 8, 50, "ItemNumbered"],
Cell[CellGroupData[{
Cell[89238, 2360, 274, 6, 32, "Input",
 Evaluatable->False],
Cell[89515, 2368, 310, 8, 23, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89862, 2381, 179, 4, 32, "Input",
 Evaluatable->False],
Cell[90044, 2387, 295, 7, 23, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90376, 2399, 187, 4, 32, "Input",
 Evaluatable->False],
Cell[90566, 2405, 309, 7, 23, "Print"]
}, Open  ]],
Cell[90890, 2415, 228, 4, 51, "Text"],
Cell[91121, 2421, 460, 10, 32, "Input"],
Cell[CellGroupData[{
Cell[91606, 2435, 87, 2, 32, "Input"],
Cell[91696, 2439, 136, 2, 23, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91869, 2446, 155, 3, 32, "Input"],
Cell[92027, 2451, 136, 2, 23, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92200, 2458, 164, 3, 32, "Input"],
Cell[92367, 2463, 139, 2, 23, "Print"]
}, Open  ]],
Cell[92521, 2468, 198, 3, 31, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[92768, 2477, 136, 1, 45, "Subsection"],
Cell[92907, 2480, 832, 21, 133, "Text"],
Cell[CellGroupData[{
Cell[93764, 2505, 505, 7, 29, "Subsubsubsection"],
Cell[94272, 2514, 509, 12, 72, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94818, 2531, 560, 7, 29, "Subsubsubsection"],
Cell[95381, 2540, 526, 14, 52, "Text"],
Cell[CellGroupData[{
Cell[95932, 2558, 419, 11, 55, "Input"],
Cell[CellGroupData[{
Cell[96376, 2573, 208, 4, 23, "Print"],
Cell[96587, 2579, 208, 4, 23, "Print"],
Cell[96798, 2585, 210, 4, 23, "Print"],
Cell[97011, 2591, 208, 4, 23, "Print"],
Cell[97222, 2597, 208, 4, 23, "Print"],
Cell[97433, 2603, 210, 4, 23, "Print"],
Cell[97646, 2609, 208, 4, 23, "Print"],
Cell[97857, 2615, 206, 4, 23, "Print"],
Cell[98066, 2621, 208, 4, 23, "Print"]
}, Open  ]]
}, Open  ]],
Cell[98301, 2629, 146, 3, 32, "Input"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[98496, 2638, 152, 2, 45, "Subsection"],
Cell[98651, 2642, 777, 16, 113, "Text"],
Cell[CellGroupData[{
Cell[99453, 2662, 505, 7, 29, "Subsubsubsection"],
Cell[99961, 2671, 549, 9, 71, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[100547, 2685, 117, 1, 35, "Subsubsection"],
Cell[100667, 2688, 249, 5, 51, "Text"],
Cell[CellGroupData[{
Cell[100941, 2697, 136, 3, 32, "Input"],
Cell[101080, 2702, 227, 3, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[101344, 2710, 234, 6, 32, "Input"],
Cell[101581, 2718, 218, 3, 23, "Print"]
}, Open  ]],
Cell[101814, 2724, 410, 7, 71, "Text"],
Cell[102227, 2733, 615, 18, 32, "Input"],
Cell[CellGroupData[{
Cell[102867, 2755, 255, 5, 32, "Input"],
Cell[103125, 2762, 320, 6, 32, "Output"]
}, Open  ]],
Cell[103460, 2771, 479, 16, 53, "Text"],
Cell[CellGroupData[{
Cell[103964, 2791, 692, 11, 29, "Subsubsubsection"],
Cell[104659, 2804, 2000, 44, 217, "Text"],
Cell[106662, 2850, 1001, 30, 121, "Input"],
Cell[CellGroupData[{
Cell[107688, 2884, 154, 3, 32, "Input"],
Cell[107845, 2889, 261, 4, 55, "Output"]
}, Open  ]],
Cell[108121, 2896, 99, 1, 31, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[108281, 2904, 200, 4, 45, "Subsection"],
Cell[108484, 2910, 1539, 32, 233, "Text"],
Cell[CellGroupData[{
Cell[110048, 2946, 327, 9, 32, "Input"],
Cell[110378, 2957, 378, 10, 32, "Output"]
}, Open  ]],
Cell[110771, 2970, 578, 11, 92, "Text"],
Cell[CellGroupData[{
Cell[111374, 2985, 186, 4, 32, "Input"],
Cell[111563, 2991, 151, 4, 32, "Output"]
}, Open  ]],
Cell[111729, 2998, 492, 10, 92, "Text"],
Cell[112224, 3010, 472, 9, 72, "Text"],
Cell[CellGroupData[{
Cell[112721, 3023, 448, 12, 32, "Input"],
Cell[113172, 3037, 150, 4, 32, "Output"]
}, Open  ]],
Cell[113337, 3044, 428, 8, 71, "Text"],
Cell[CellGroupData[{
Cell[113790, 3056, 393, 11, 32, "Input"],
Cell[114186, 3069, 150, 4, 32, "Output"]
}, Open  ]],
Cell[114351, 3076, 171, 4, 31, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114559, 3085, 173, 2, 45, "Subsection"],
Cell[114735, 3089, 202, 6, 32, "Text"],
Cell[114940, 3097, 394, 10, 32, "Input"],
Cell[CellGroupData[{
Cell[115359, 3111, 254, 5, 32, "Input"],
Cell[115616, 3118, 248, 5, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[115901, 3128, 248, 5, 32, "Input"],
Cell[116152, 3135, 210, 4, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[116399, 3144, 253, 5, 32, "Input"],
Cell[116655, 3151, 219, 4, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[116911, 3160, 291, 8, 32, "Input"],
Cell[117205, 3170, 2527, 49, 130, "Output"]
}, Open  ]],
Cell[119747, 3222, 856, 22, 134, "Text"],
Cell[CellGroupData[{
Cell[120628, 3248, 310, 7, 32, "Input"],
Cell[120941, 3257, 204, 3, 23, "Print"]
}, Open  ]],
Cell[121160, 3263, 457, 16, 53, "Text"],
Cell[CellGroupData[{
Cell[121642, 3283, 204, 5, 32, "Input"],
Cell[121849, 3290, 252, 6, 32, "Output"]
}, Open  ]],
Cell[122116, 3299, 440, 10, 52, "Text"],
Cell[CellGroupData[{
Cell[122581, 3313, 337, 8, 32, "Input"],
Cell[122921, 3323, 215, 3, 23, "Print"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123173, 3331, 728, 14, 30, "Subsubsubsection"],
Cell[123904, 3347, 580, 14, 93, "Text"],
Cell[CellGroupData[{
Cell[124509, 3365, 483, 11, 77, "Input"],
Cell[124995, 3378, 142, 2, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[125174, 3385, 155, 3, 32, "Input"],
Cell[125332, 3390, 140, 2, 23, "Print"]
}, Open  ]],
Cell[125487, 3395, 73, 1, 31, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[125609, 3402, 168, 2, 45, "Subsection"],
Cell[125780, 3406, 332, 6, 51, "Text"],
Cell[CellGroupData[{
Cell[126137, 3416, 505, 7, 29, "Subsubsubsection"],
Cell[CellGroupData[{
Cell[126667, 3427, 516, 12, 65, "Item"],
Cell[127186, 3441, 356, 6, 65, "Item"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[127591, 3453, 727, 11, 29, "Subsubsubsection"],
Cell[128321, 3466, 2048, 46, 236, "Text"],
Cell[130372, 3514, 1462, 41, 143, "Input"],
Cell[CellGroupData[{
Cell[131859, 3559, 255, 5, 32, "Input"],
Cell[132117, 3566, 134, 2, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[132288, 3573, 206, 4, 32, "Input"],
Cell[132497, 3579, 139, 2, 32, "Output"]
}, Open  ]],
Cell[132651, 3584, 97, 1, 31, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[132797, 3591, 105, 1, 45, "Subsection"],
Cell[132905, 3594, 269, 7, 71, "Text"],
Cell[133177, 3603, 592, 16, 77, "Input"],
Cell[133772, 3621, 1137, 24, 171, "Text"],
Cell[134912, 3647, 257, 7, 32, "Input"],
Cell[135172, 3656, 220, 6, 31, "Text"],
Cell[CellGroupData[{
Cell[135417, 3666, 149, 3, 32, "Input"],
Cell[135569, 3671, 164, 3, 32, "Output"]
}, Open  ]],
Cell[135748, 3677, 217, 6, 31, "Text"],
Cell[CellGroupData[{
Cell[135990, 3687, 173, 4, 32, "Input"],
Cell[136166, 3693, 610, 12, 24, "Message"],
Cell[136779, 3707, 219, 5, 32, "Output"]
}, Open  ]],
Cell[137013, 3715, 245, 6, 31, "Text"],
Cell[137261, 3723, 198, 5, 32, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[137496, 3733, 158, 2, 45, "Subsection"],
Cell[137657, 3737, 565, 9, 91, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
